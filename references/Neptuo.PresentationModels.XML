<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neptuo.PresentationModels</name>
    </assembly>
    <members>
        <member name="T:Neptuo.PresentationModels.CopyModelValueProvider">
            <summary>
            Copies values from source getter to target setter.
            Instance per model definition.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.CopyModelValueProvider.#ctor(Neptuo.PresentationModels.IModelDefinition,System.Boolean)">
            <summary>
            Creates new instance for <paramref name="modelDefinition"/>.
            </summary>
            <param name="modelDefinition">Model definition.</param>
            <param name="isAutoConversion">Whether type conversion should be called when types are not assignable.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.CopyModelValueProvider.Update(Neptuo.PresentationModels.IModelValueSetter,Neptuo.PresentationModels.IModelValueGetter[])">
            <summary>
            Sets values to <paramref name="targetSetter"/> from <paramref name="sourceGetters"/>.
            </summary>
            <param name="targetSetter">Target.</param>
            <param name="sourceGetters">Sources.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.CopyModelValueProvider.IsAssignable(System.Type,System.Object)">
            <summary>
            Determines whether <paramref name="value"/> can be assigned to field of type <paramref name="fieldType"/>.
            </summary>
            <param name="fieldType">Required type.</param>
            <param name="value">Current value.</param>
            <returns><c>true</c> if <paramref name="value"/> can be assigned with <paramref name="value"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Neptuo.PresentationModels.CopyModelValueProvider.ModelDefinition">
            <summary>
            Model definition.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.CopyModelValueProvider.IsAutoConversion">
            <summary>
            Whether type conversion should be called when types are not assignable.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.DictionaryModelValueProvider">
            <summary>
            Simple wrap of <see cref="T:System.Collections.Generic.Dictionary`2"/> that implements <see cref="T:Neptuo.PresentationModels.IModelValueProvider"/>.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.IModelValueProvider">
            <summary>
            Current value getter and setter.
            Provides methods for reading and writing values.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.IModelValueGetter">
            <summary>
            Current value getter.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.IModelValueGetter.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to read current value with <paramref name="identifier"/> as identifier.
            Returns <c>true</c> if value can be provided; false otherwise.
            </summary>
            <param name="identifier">Field identifier to read its value.</param>
            <param name="value">Current value for <paramref name="identifier"/>.</param>
            <returns><c>true</c> if value can be provided; false otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Neptuo.PresentationModels.IModelValueSetter" -->
        <member name="M:Neptuo.PresentationModels.IModelValueSetter.TrySetValue(System.String,System.Object)">
            <summary>
            Tries to value of field with <paramref name="identifier"/> to <paramref name="value"/>.
            </summary>
            <param name="identifier">Field identifier to set value.</param>
            <param name="value">New value for field with <paramref name="identifier"/>.</param>
            <returns><c>true</c> if setting value was successfull; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.DictionaryModelValueProvider.#ctor">
            <summary>
            Creates new empty instance.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.FieldDefinition">
            <summary>
            Implementation of <see cref="T:Neptuo.PresentationModels.IFieldDefinition"/>.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.IFieldDefinition">
            <summary>
            Defines field of model.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IFieldDefinition.Identifier">
            <summary>
            Field name (unique in model).
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IFieldDefinition.FieldType">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IFieldDefinition.Metadata">
            <summary>
            Collection of provided meta data values.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.FieldDefinitionBuilderBase">
            <summary>
            Base implementation for building <see cref="T:Neptuo.PresentationModels.IFieldDefinitionBuilder"/>.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.IFieldDefinitionBuilder">
            <summary>
            Builds field definition.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.IFieldDefinitionBuilder.Build">
            <summary>
            Builds field definition.
            </summary>
            <returns>Field definition.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.FieldDefinitionBuilderBase.BuildFieldIdentifier">
            <summary>
            Provides field identifier.
            </summary>
            <returns>Field identifier.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.FieldDefinitionBuilderBase.BuildFieldType">
            <summary>
            Provides field type.
            </summary>
            <returns>Field type.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.FieldDefinitionBuilderBase.BuildFieldMetadata">
            <summary>
            Provides field metadata.
            </summary>
            <returns>Field metadata.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.FieldDefinitionBuilderBase.Build">
            <summary>
            Builds field definition using <see cref="T:Neptuo.PresentationModels.FieldDefinition"/>.
            </summary>
            <returns>Field definition.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.IMetadataBuilder">
            <summary>
            Builder for metadata.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.IMetadataBuilder.Add(System.String,System.Object)">
            <summary>
            Sets <paramref name="identifier"/> to <paramref name="value"/>.
            </summary>
            <param name="identifier">Metadata key.</param>
            <param name="value">Value to associate with <paramref name="identifier"/>.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.IModelDefinition">
            <summary>
            Definition of whole model.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IModelDefinition.Identifier">
            <summary>
            Model identifier.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IModelDefinition.Fields">
            <summary>
            Enumeration of fields.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.IModelDefinition.Metadata">
            <summary>
            Model metadata collection.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels._ModelValueGetterExtensions">
            <summary>
            Provides extensions for reading values from <see cref="T:Neptuo.PresentationModels.IModelValueGetter"/>
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels._ModelValueGetterExtensions.GetValueOrDefault(Neptuo.PresentationModels.IModelValueGetter,System.String,System.Object)">
            <summary>
            Reads value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, returns <paramref name="defaultValue"/>.
            </summary>
            <returns>Value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, returns <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels._ModelValueGetterExtensions.GetValueOrDefault(Neptuo.PresentationModels.IModelValueGetter,System.String,System.Func{System.Object})">
            <summary>
            Reads value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, invokes <paramref name="defaultValueGetter"/>.
            </summary>
            <returns>Value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, invokes <paramref name="defaultValueGetter"/>.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels._ModelValueGetterExtensions.GetValueOrDefault``1(Neptuo.PresentationModels.IModelValueGetter,System.String,``0)">
            <summary>
            Reads value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, returns <paramref name="defaultValue"/>.
            </summary>
            <returns>Value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, returns <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels._ModelValueGetterExtensions.GetValueOrDefault``1(Neptuo.PresentationModels.IModelValueGetter,System.String,System.Func{``0})">
            <summary>
            Reads value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, invokes <paramref name="defaultValueGetter"/>.
            </summary>
            <returns>Value from <paramref name="getter"/> with <paramref name="identifier"/> and if this can't be provided, invokes <paramref name="defaultValueGetter"/>.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.MetadataCollection">
            <summary>
            Default implementation of <see cref="T:Neptuo.PresentationModels.IMetadataBuilder"/> based on <see cref="T:Neptuo.Collections.Specialized.KeyValueCollection"/>.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.ModelDefinitionBuilderBase">
            <summary>
            Base implementation for building <see cref="T:Neptuo.PresentationModels.IModelDefinition"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionBuilderBase.BuildModelIdentifier">
            <summary>
            Provides model identifier.
            </summary>
            <returns>Model identifier.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionBuilderBase.BuildFieldDefinitions">
            <summary>
            Provides field definitions.
            </summary>
            <returns>Field definitions.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionBuilderBase.BuildModelMetadata">
            <summary>
            Provides model metadata.
            </summary>
            <returns>Model metadata.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionBuilderBase.Create">
            <summary>
            Builds model definition using <see cref="T:Neptuo.PresentationModels.ModelDefinition"/>.
            </summary>
            <returns>Model definition.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.ModelDefinitionCollection">
            <summary>
            Collection of registered model definitions.
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionCollection.Add(Neptuo.PresentationModels.IModelDefinition)">
            <summary>
            Registers instance of model definition.
            </summary>
            <param name="modelDefinition">Model definition to register.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionCollection.Add(System.String,Neptuo.Activators.IActivator{Neptuo.PresentationModels.IModelDefinition})">
            <summary>
            Registers builder for model definition with identifier <paramref name="modelIdentifier" />.
            </summary>
            <param name="modelIdentifier">Identifier to register <paramref name="modelDefinitionBuilder"/> with.</param>
            <param name="modelDefinitionBuilder">Model definition builder used to create singleton instance.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionCollection.AddSearchHandler(Neptuo.OutFunc{System.String,Neptuo.PresentationModels.IModelDefinition,System.Boolean})">
            <summary>
            Adds <paramref name="searchHandler"/> to be executed when model definition was not found.
            </summary>
            <param name="searchHandler">Model definition provider method.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.ModelDefinitionCollection.TryGet(System.String,Neptuo.PresentationModels.IModelDefinition@)">
            <summary>
            Tries to get model definition for identifier <paramref name="modelIdentifier"/>.
            </summary>
            <param name="modelIdentifier">Identifier of requested model definition.</param>
            <param name="modelDefinition">Model definition.</param>
            <returns><c>true</c> if model was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.ObservableModelValueProvider">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:Neptuo.PresentationModels.IModelValueProvider"/>.
            Every successfull set to inner setter raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            If value is not changed, set is not called.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.ObservableModelValueSetter">
            <summary>
            Implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and <see cref="T:Neptuo.PresentationModels.IModelValueSetter"/>.
            Every successfull set to inner setter raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.ObservableModelValueSetter.#ctor(Neptuo.PresentationModels.IModelValueSetter)">
            <summary>
            Creates new instance that wraps <paramref name="innerSetter"/> and raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
            <param name="innerSetter">Inner setter.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.ObservableModelValueProvider.#ctor(Neptuo.PresentationModels.IModelValueProvider)">
            <summary>
            Creates new instance that wraps <paramref name="innerSetter"/> and raises <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
            <param name="innerSetter">Inner provider.</param>
        </member>
        <member name="T:Neptuo.PresentationModels.ModelDefinition">
            <summary>
            Implementation of <see cref="T:Neptuo.PresentationModels.IModelDefinition"/>.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.ProxyModelDefinition">
            <summary>
            Wraps inner model definition into proxy model definition.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.ProxyModelDefinitionBase">
            <summary>
            Model definition that dynamically refreshes model parts as requested.
            </summary>
        </member>
        <member name="F:Neptuo.PresentationModels.ProxyModelDefinitionBase.identifier">
            <summary>
            Cached model identifier.
            </summary>
        </member>
        <member name="F:Neptuo.PresentationModels.ProxyModelDefinitionBase.fields">
            <summary>
            Cached model fields.
            </summary>
        </member>
        <member name="F:Neptuo.PresentationModels.ProxyModelDefinitionBase.metadata">
            <summary>
            Cached model metadata.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.ProxyModelDefinitionBase.RefreshIdentifier">
            <summary>
            Provides model identifier.
            </summary>
            <returns>Model identifier.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ProxyModelDefinitionBase.RefreshFields">
            <summary>
            Provides model fields.
            </summary>
            <returns>Model fields.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.ProxyModelDefinitionBase.RefreshMetadata">
            <summary>
            Provides model metadata.
            </summary>
            <returns>Model metadata.</returns>
        </member>
        <member name="P:Neptuo.PresentationModels.ProxyModelDefinitionBase.IsRefreshRequired">
            <summary>
            If <c>true</c>, next access to identifier, fields or metadata forces refresh.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.ProxyModelDefinition.#ctor(Neptuo.PresentationModels.IModelDefinition)">
            <summary>
            Creates new instance with <paramref name="modelDefinition"/> as inner model definition.
            </summary>
            <param name="modelDefinition">Inner model definition.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.ProxyModelDefinition.ModelDefinition">
            <summary>
            Inner model definition.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderBase`1">
            <summary>
            Base implementation of <see cref="T:Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader"/> for specific type of attribute.
            </summary>
            <typeparam name="T">Type of attribute to process.</typeparam>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader">
            <summary>
            Attribute based metadata builder.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader.Apply(System.Attribute,Neptuo.PresentationModels.IMetadataBuilder)">
            <summary>
            Process attribute usage.
            </summary>
            <param name="attribute">Attribute instance.</param>
            <param name="builder">Metadata builder.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderBase`1.ApplyInternal(`0,Neptuo.PresentationModels.IMetadataBuilder)">
            <summary>
            Process attribute usage.
            </summary>
            <param name="attribute">Attribute instance.</param>
            <param name="builder">Metadata builder.</param>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection">
            <summary>
            Attribute type based collection of registered attribute metadata readers.
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection.Add(System.Type,Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader)">
            <summary>
            Registers <paramref name="attributeType"/> to be read by <paramref name="reader"/>.
            </summary>
            <param name="attributeType">Type of attribute.</param>
            <param name="reader">Reader to process attributes of type <paramref name="attributeType"/>.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection.TryGet(System.Type,Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader@)">
            <summary>
            Tries to get metadata reader for attribute of type <paramref name="attributeType"/>.
            </summary>
            <param name="attributeType">Type of attribute.</param>
            <param name="reader">Registered reader for attributes of type <paramref name="attributeType"/>.</param>
            <returns><c>true</c> if reader is registered; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.Expressions.FieldValueProviderCollection`1">
            <summary>
            Default implementation of <see cref="T:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection`1"/>
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection`1">
            <summary>
            Collection of <see cref="T:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection`1"/>.
            </summary>
            <typeparam name="TModel">Type of model.</typeparam>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection`1.TryGet(System.String,Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider{`0}@)">
            <summary>
            Tries to get value provider for field with identifier <paramref name="fieldIdentifier"/>.
            </summary>
            <param name="fieldIdentifier">Field identifier.</param>
            <param name="provider">Value provider.</param>
            <returns><c>true</c> if provider was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.Expressions.FieldValueProviderCollection`1.Add(System.String,Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider{`0})">
            <summary>
            Registers <paramref name="provider"/> to be used for field with identifier <paramref name="fieldIdentifier"/>.
            </summary>
            <param name="fieldIdentifier">Field identifier.</param>
            <param name="provider">Value provider.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.Expressions.FuncFieldValueProvider`2">
            <summary>
            Delegate based implementation of <see cref="T:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider`1"/>.
            </summary>
            <typeparam name="TModel">Type of model.</typeparam>
            <typeparam name="TPropertyType">Type of field.</typeparam>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider`1">
            <summary>
            Single field value provider.
            </summary>
            <typeparam name="TModel">Type of model.</typeparam>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider`1.GetValue(`0)">
            <summary>
            Gets value from the field.
            </summary>
            <param name="model">Instance of model.</param>
            <returns>Value of field in <paramref name="model"/>.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider`1.SetValue(`0,System.Object)">
            <summary>
            Sets value to the field.
            </summary>
            <param name="model">Instance of model.</param>
            <param name="value">New value of model.</param>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.IMetadataReader">
            <summary>
            Context-less metadata reader.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.IMetadataReader.Apply(Neptuo.PresentationModels.IMetadataBuilder)">
            <summary>
            Appends metadata to the <paramref name="builder"/>.
            </summary>
            <param name="builder">Metadata builder.</param>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder">
            <summary>
            Reflection based builder for <see cref="T:Neptuo.PresentationModels.IModelDefinition"/>.
            - Fields are created from properties.
            - Metadata are created from attributes.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.#ctor(System.Type,Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection)">
            <summary>
            Creates new instance for type <paramref name="modelType"/>.
            </summary>
            <param name="modelType">Underlaying type for this model definition builder.</param>
            <param name="metadataReaderCollection">Collection attribute metadata readers.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildModelIdentifier">
            <summary>
            Returns identifier for model definition.
            Calls <see cref="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildIdentifier(System.Reflection.MemberInfo)"/> with <see cref="P:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.ModelType"/>.
            </summary>
            <returns>Identifier for model definition.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildModelMetadata">
            <summary>
            Returns metadata for model definition.
            Calls <see cref="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildMetadata(System.Reflection.MemberInfo)"/> with <see cref="P:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.ModelType"/>.
            </summary>
            <returns>Metadata for model definition.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildFieldDefinitions">
            <summary>
            Emurates over public properties and for each one generates field.
            </summary>
            <returns>Enumeration of fields.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.IsFieldCompatibleProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether to create field definition from <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">Property info.</param>
            <returns><c>true</c> if field definition should be created from <paramref name="propertyInfo"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildMetadata(System.Reflection.MemberInfo)">
            <summary>
            Reads attributes of <paramref name="memberInfo"/> and tries to create metadata for each one.
            </summary>
            <param name="memberInfo">Reflection source.</param>
            <returns>Collection of metadata values.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildIdentifier(System.Reflection.MemberInfo)">
            <summary>
            Returns identifier for <paramref name="memberInfo"/>.
            </summary>
            <param name="memberInfo">Reflection source.</param>
            <returns>Identifier for <paramref name="memberInfo"/>.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.BuildFieldType(System.Reflection.PropertyInfo)">
            <summary>
            Returns field type for field from <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">Reflection source.</param>
            <returns>Field type for field from <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="P:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.ModelType">
            <summary>
            Underlaying type for this model definition builder.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.MetadataReaderCollection">
            <summary>
            Collection attribute metadata readers.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory">
            <summary>
            Reflection based factory for creating <see cref="T:Neptuo.PresentationModels.IModelDefinition"/> from .NET types.
            - Fields are created from properties.
            - Metadata are created from attributes.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory.#ctor(Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection)">
            <summary>
            Creates new instance.
            </summary>
            <param name="metadataReaderCollection">Collection attribute metadata readers.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory.Create(System.Type)">
            <summary>
            Creates model definition for <see cref="!:modelType"/>.
            </summary>
            <param name="modelType">Type to create model definition from.</param>
            <returns>Model definition for <see cref="!:modelType"/>.</returns>
        </member>
        <member name="P:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionFactory.MetadataReaderCollection">
            <summary>
            Collection attribute metadata readers.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection">
            <summary>
            Collection of model definitions by model type.
            This class is thread-safe.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection.Add(System.Type,Neptuo.PresentationModels.IModelDefinition)">
            <summary>
            Registers instance of model definition to be mapped to <paramref name="modelType" />.
            </summary>
            <param name="modelType">Type to register model definition to.</param>
            <param name="modelDefinition">Model definition to register.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection.AddSearchHandler(Neptuo.OutFunc{System.Type,Neptuo.PresentationModels.IModelDefinition,System.Boolean})">
            <summary>
            Adds <paramref name="searchHandler"/> to be executed when model definition was not found.
            </summary>
            <param name="searchHandler">Model definition provider method.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection.TryGet(System.Type,Neptuo.PresentationModels.IModelDefinition@)">
            <summary>
            Tries to get model definition for type <paramref name="modelType"/>.
            </summary>
            <param name="modelType">Type of requested model definition.</param>
            <param name="modelDefinition">Model definition.</param>
            <returns><c>true</c> if model was found; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider`1">
            <summary>
            Reflection based implementation of <see cref="T:Neptuo.PresentationModels.IModelValueProvider"/> that operates over single object instance.
            </summary>
            <typeparam name="TModel">Type of model.</typeparam>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider`1.#ctor(`0)">
            <summary>
            Creates new instance.
            </summary>
            <param name="model">Instance of model. Can't be <c>null</c>.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider`1.TryGetPropertyInfo(System.String,System.Reflection.PropertyInfo@)">
            <summary>
            Tries to get property info for identifier <paramref name="identier"/>.
            </summary>
            <param name="identifier">Property identifier.</param>
            <param name="propertyInfo">Target property info.</param>
            <returns><c>true</c> if such property exists; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider`1.ModelType">
            <summary>
            Type of model.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider`1.Model">
            <summary>
            Instance of model.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider">
            <summary>
            Reflection based implementation of <see cref="T:Neptuo.PresentationModels.IModelValueProvider"/> that operates over single object instance.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels._AttributeMetadataReaderCollectionExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels._AttributeMetadataReaderCollectionExtensions.Add``1(Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection,Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader)">
            <summary>
            Registers <typeparamref name="TAttribute"/> to be read by <paramref name="reader"/>.
            </summary>
            <typeparam name="TAttribute">Type of attribute.</typeparam>
            <param name="reader">Reader to process attributes of type <typeparamref name="TAttribute"/>.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels._AttributeMetadataReaderCollectionExtensions.Add``1(Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection,Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderBase{``0})">
            <summary>
            Registers <typeparamref name="TAttribute"/> to be read by <paramref name="reader"/>.
            </summary>
            <typeparam name="TAttribute">Type of attribute.</typeparam>
            <param name="reader">Reader to process attributes of type <typeparamref name="TAttribute"/>.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions.AddReflectionSearchHandler(Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection,Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection)">
            <summary>
            Registers default search handler that for all types creates model definition by <see cref="T:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder"/>.
            </summary>
            <param name="collection">Model definition collection to register search handler to.</param>
            <param name="metadataReaders">Collection of metadata readers for <see cref="T:Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions.Get(Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection,System.Type)">
            <summary>
            Returns model definition for type <paramref name="modelType"/>.
            If <paramref name="collection"/> doesn't contain such definition, throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="collection">Model definition collection to get model definition from.</param>
            <param name="modelType">Associated model type to requested model definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="collection"/> doesn't contain model definition for <see cref="!:modelType"/>.</exception>
        </member>
        <member name="M:Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions.Get``1(Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection)">
            <summary>
            Returns model definition for type <typeparamref name="TModelType"/>.
            If <paramref name="collection"/> doesn't contain such definition, throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="TModelType">Associated model type to requested model definition.</typeparam>
            <param name="collection">Model definition collection to get model definition from.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="collection"/> doesn't contain model definition for <typeparamref name="TModelType"/>.</exception>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2">
            <summary>
            Base field validator for meta data of type <typeparamref name="TMetadataValue"/> and field value of type <typeparamref name="TFieldValue"/>.
            Uses <see cref="P:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.MetadataKey"/> as key to metadata collection of field definition <see cref="T:Neptuo.PresentationModels.IFieldDefinition"/>, 
            read value is passed with value from <see cref="T:Neptuo.PresentationModels.IModelValueGetter"/> to abstract <see cref="M:Neptuo.PresentationModels.Validators.IFieldMetadataValidator.Validate(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)"/> metod.
            </summary>
            <typeparam name="TMetadataValue">Type of meta data value.</typeparam>
            <typeparam name="TFieldValue">Type of field value.</typeparam>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.IFieldMetadataValidator">
            <summary>
            Validator for single field of presentation model.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.IFieldMetadataValidator.Validate(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)">
            <summary>
            Validates value from <paramref name="getter"/> againts field definition in <paramref name="fieldDefinition"/>.
            Returns <c>true</c> if field is valid; false otherwise.
            </summary>
            <param name="fieldDefinition">Defines field to validate.</param>
            <param name="getter">Provides current values.</param>
            <param name="resultBuilder">Validation result builder.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.#ctor(System.String)">
            <summary>
            Creates new instance using <paramref name="metadataKey"/>.
            </summary>
            <param name="metadataKey">Meta data name (key) to validate.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.Validate(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)">
            <summary>
            Reads metadata value from  <paramref name="fieldDefinition"/> and current value from <paramref name="getter"/> and passes these values to <see cref="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.Validate(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)"/>.
            If metadata key is not found, <see cref="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.MissingMetadataKey(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)"/> is called.
            Returns <c>true</c> if field is valid; false otherwise.
            </summary>
            <param name="fieldDefinition">Defines field to validate.</param>
            <param name="getter">Provides current values.</param>
            <param name="resultBuilder">Validation result builder.</param>
            <returns><c>true</c> if field is valid; false otherwise.</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.Validate(`1,`0,Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext)">
            <summary>
            Provides validation logic for validating <paramref name="fieldValue"/> againts <paramref name="metadatValue"/>.
            Validation result builder is in <paramref name="context" />
            </summary>
            <param name="fieldValue">Current field value.</param>
            <param name="metadataValue">Metadata value.</param>
            <param name="context">Validation context.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.MissingMetadataKey(Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)">
            <summary>
            Provides behavior when metadata key is not found in field definition.
            By default, does nothing.
            </summary>
            <param name="fieldDefinition">Defines field to validate.</param>
            <param name="getter">Provides current values.</param>
            <param name="resultBuilder">Validation result builder.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase`2.MetadataKey">
            <summary>
            Meta data name (key) to validate.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext" -->
        <member name="T:Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey">
            <summary>
            Describes key for selecting <see cref="T:Neptuo.PresentationModels.Validators.IFieldMetadataValidator"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="modelIdentifier">Identifier of model definition.</param>
            <param name="fieldIdentifier">Identifier of field definition.</param>
            <param name="metadataKey">Field metadata validator key.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ModelIdentifier">
            <summary>
            Identifier of model definition.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.FieldIdentifier">
            <summary>
            Identifier of field definition.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.MetadataKey">
            <summary>
            Field metadata validator key.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.IFieldValidator">
            <summary>
            Validator of single field.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.IFieldValidator.Validate(Neptuo.PresentationModels.IModelDefinition,Neptuo.PresentationModels.IFieldDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)">
            <summary>
            Validates field defined by <paramref name="fieldDefinition"/> on model <paramref name="modelDefinition"/> with current values in <paramref name="getter"/>.
            </summary>
            <param name="modelDefinition">Model definition that contains <paramref name="fieldDefinition"/>.</param>
            <param name="fieldDefinition">Field definition to validate.</param>
            <param name="getter">Current values.</param>
            <param name="resultBuilder">Validation result builder.</param>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.MetadataFieldValidator">
            <summary>
            Metadata based field validator.
            Uses <see cref="T:Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection"/> to get registered metadata validators and execute them.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.MetadataFieldValidator.#ctor(Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection)">
            <summary>
            Creates new instance for validating <see cref="T:Neptuo.PresentationModels.IFieldDefinition"/> with collection of metadata validators <paramref name="validators"/>.
            </summary>
            <param name="validators">Collection of metadata validators.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.MetadataFieldValidator.Validators">
            <summary>
            Collection of field validators.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.Validation.ModelValidatorContext">
            <summary>
            Description of model validator for <see cref="T:Neptuo.Pipelines.Validators.IValidationDispatcher"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validation.ModelValidatorContext.#ctor(Neptuo.PresentationModels.IModelDefinition,Neptuo.PresentationModels.IModelValueGetter)">
            <summary>
            Creates new instance. Parameters can't be <c>null</c>.
            </summary>
            <param name="definition">Model definition.</param>
            <param name="getter">Model values to validate.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.Validation.ModelValidatorContext.Definition">
            <summary>
            Model definition.
            </summary>
        </member>
        <member name="P:Neptuo.PresentationModels.Validation.ModelValidatorContext.Getter">
            <summary>
            Model values to validate.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection">
            <summary>
            Registry between models and their validators.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection.TryGet(System.String,System.String,System.String,Neptuo.PresentationModels.Validators.IFieldMetadataValidator@)">
            <summary>
            Tries to find validator for <paramref name="metadataKey"/> on field <paramref name="fieldIdentifier"/> of model <paramref name="modelIdentifier"/>.
            Returns <c>true</c> if validator is found; false otherwise.
            </summary>
            <param name="modelIdentifier">Identifier of model definition.</param>
            <param name="fieldIdentifier">Identifier of field definition.</param>
            <param name="metadataKey">Field metadata validator key.</param>
            <param name="validator">Registered validator.</param>
            <returns><c>true</c> if validator is found; false otherwise.</returns>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.Handlers.FieldMetadataModelValidator">
            <summary>
            Validates model using collection of metadata validators.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.Handlers.ModelValidator">
            <summary>
            Base for <see cref="!:IModelValidationHandler"/>.
            Validator result built from validation of all fields.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.Handlers.ModelValidator.#ctor(Neptuo.PresentationModels.Validators.IFieldValidator)">
            <summary>
            Creates new instance with <paramref name="fieldValidator"/> to validating fields.
            </summary>
            <param name="fieldValidator">Field validator.</param>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.Handlers.ModelValidator.CreateResultBuilder">
            <summary>
            Creates instance of validation result builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.Handlers.ModelValidator.ValidateInternal(Neptuo.PresentationModels.IModelDefinition,Neptuo.PresentationModels.IModelValueGetter,Neptuo.Pipelines.Validators.IValidationResultBuilder)">
            <summary>
            Provides logic for validating model.
            </summary>
            <param name="modelDefinition">Model definition.</param>
            <param name="fieldDefinition">Defines field to validate.</param>
            <param name="getter">Provides current values.</param>
            <param name="resultBuilder">Validation result builder.</param>
        </member>
        <member name="P:Neptuo.PresentationModels.Validators.Handlers.ModelValidator.FieldValidator">
            <summary>
            Field validator.
            </summary>
        </member>
        <member name="T:Neptuo.PresentationModels.Validators.FieldMetadataValidatorCollection">
            <summary>
            Implementation of <see cref="T:Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorCollection.Add(System.String,System.String,System.String,Neptuo.PresentationModels.Validators.IFieldMetadataValidator)">
            <summary>
            Add validator for <paramref name="metadataKey"/> on field <paramref name="fieldIdentifier"/> of model <paramref name="modelIdentifier"/>.
            </summary>
            <param name="modelIdentifier">Identifier of model definition.</param>
            <param name="fieldIdentifier">Identifier of field definition.</param>
            <param name="metadataKey">Field metadata validator key.</param>
            <param name="validator">Validator.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorCollection.Add(System.String,System.String,System.String,Neptuo.Activators.IActivator{Neptuo.PresentationModels.Validators.IFieldMetadataValidator})">
            <summary>
            Add validator factory for <paramref name="metadataKey"/> on field <paramref name="fieldIdentifier"/> of model <paramref name="modelIdentifier"/>.
            </summary>
            <param name="modelIdentifier">Identifier of model definition.</param>
            <param name="fieldIdentifier">Identifier of field definition.</param>
            <param name="metadataKey">Field metadata validator key.</param>
            <param name="validator">Validator factory.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.PresentationModels.Validators.FieldMetadataValidatorCollection.AddSearchHandler(Neptuo.OutFunc{Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey,Neptuo.PresentationModels.Validators.IFieldMetadataValidator,System.Boolean})">
            <summary>
            Adds <paramref name="searchHandler"/> to be executed when field metadata validator was not found.
            </summary>
            <param name="searchHandler">Field metadata validator method.</param>
        </member>
        <member name="T:Neptuo.PresentationModels._ModelDefinitionExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.PresentationModels.IModelDefinition"/>.
            </summary>
        </member>
        <member name="M:Neptuo.PresentationModels._ModelDefinitionExtensions.FieldsByIdentifier(Neptuo.PresentationModels.IModelDefinition)">
            <summary>
            Returns fields from <paramref name="modelDefinition"/> mapped to dictionary by <see cref="P:Neptuo.PresentationModels.IFieldDefinition.Identifier"/>.
            </summary>
            <param name="modelDefinition">Source model definition to read fields from.</param>
            <returns>Fields from <paramref name="modelDefinition"/> mapped to dictionary by <see cref="P:Neptuo.PresentationModels.IFieldDefinition.Identifier"/>.</returns>
        </member>
    </members>
</doc>
