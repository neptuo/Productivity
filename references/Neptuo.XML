<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neptuo</name>
    </assembly>
    <members>
        <member name="T:Neptuo.Activators.DependencyLifetime">
            <summary>
            Describes lifetime of object in dependency container.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.RootScopeName">
            <summary>
            Name of the root scope.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.IsTransient">
            <summary>
            Returns <c>true</c> if lifetime is transient.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.IsScoped">
            <summary>
            Returns <c>true</c> if lifetime is scoped (named or any).
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.IsNamed">
            <summary>
            Returns <c>true</c> if lifetime is scoped and named.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.Name">
            <summary>
            Returns name of the scope.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.Transient">
            <summary>
            Transient lifetime.
            </summary>
        </member>
        <member name="F:Neptuo.Activators.DependencyLifetime.AnyScope">
            <summary>
            Scoped lifetime.
            </summary>
        </member>
        <member name="M:Neptuo.Activators.DependencyLifetime.NamedScope(System.String)">
            <summary>
            Name-scoped lifetime.
            </summary>
            <param name="name">The name of the scope.</param>
            <returns>Name-scoped lifetime.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.Map(Neptuo.Activators.IDependencyContainer,System.Type)">
            <summary>
            Starts fluent registration for <paramref name="requiredType"/>.
            </summary>
            <param name="dependencyContainer">Container to register type in.</param>
            <param name="requiredType">Source type for this registration.</param>
            <returns>Component for mapping object lifetime.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.Map``1(Neptuo.Activators.IDependencyContainer)">
            <summary>
            Starts fluent registration for <typeparamref name="TRequired"/>
            </summary>
            <typeparam name="TRequired">Source type for this registration.</typeparam>
            <param name="dependencyContainer">Container to register type in.</param>
            <returns>Component for mapping object lifetime.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.InTransient(Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping)">
            <summary>
            Maps <paramref name="model" /> to have transient life time (= new instance for every resolution).
            </summary>
            <param name="model">Current registration.</param>
            <returns>Component for mapping target.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.InAnyScope(Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping)">
            <summary>
            Maps <paramref name="model" /> to have per scope life time (= new instance in every container scope).
            </summary>
            <param name="model">Current registration.</param>
            <returns>Component for mapping target.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.InNamedScope(Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping,System.String)">
            <summary>
            Maps <paramref name="model" /> to have per concrete names scope life time (= new instance every scope named <paramref name="scopeName"/>).
            </summary>
            <param name="model">Current registration.</param>
            <param name="scopeName">Name of the scope.</param>
            <returns>Component for mapping target.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.ToType(Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping,System.Type)">
            <summary>
            Maps <paramref name="model"/> to target type (= required type will be mapped to instance of <paramref name="targetType"/>).
            </summary>
            <param name="model">Current registration.</param>
            <param name="targetType">Target mapped type.</param>
            <returns>Current cotainer to execute next actions.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.ToType``1(Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping)">
            <summary>
            Maps <paramref name="model"/> to target type (= required type will be mapped to instance of <typeparamref name="TTarget"/>).
            </summary>
            <typeparam name="TTarget">Target mapped type.</typeparam>
            <param name="model">Current registration.</param>
            <returns>Current cotainer to execute next actions.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.ToActivator``1(Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping,Neptuo.Activators.IActivator{``0})">
            <summary>
            Maps <paramref name="model"/> to activator (= instance will be created using <paramref name="activator"/>).
            </summary>
            <typeparam name="TTarget">Type, that is provided by the <paramref name="activator"/>.</typeparam>
            <param name="model">Current registration.</param>
            <param name="activator">Activator to creates instances by, in this registration.</param>
            <returns>Current cotainer to execute next actions.</returns>
        </member>
        <member name="T:Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping">
            <summary>
            Provides ability to map <see cref="T:Neptuo.Activators.DependencyLifetime"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping.In(Neptuo.Activators.DependencyLifetime)">
            <summary>
            Maps <see cref="T:Neptuo.Activators.DependencyLifetime"/> for <paramref name="model"/>.
            </summary>
            <param name="lifetime">Chosen object life time.</param>
            <returns>Component for mapping target.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping.InCurrentScope">
            <summary>
            Maps <paramref name="model" /> to have instance in scopes that are named same as the current scope 
            (= if any child scope will have different name, <paramref name="model" /> will produce singleton).
            </summary>
            <returns>Component for mapping target.</returns>
        </member>
        <member name="T:Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping">
            <summary>
            Provides ability to map <paramref name="model" /> target.
            </summary>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping.To(System.Object)">
            <summary>
            Maps target of <paramref name="model" />.
            Can by any supported type, see container target feature configuration.
            </summary>
            <param name="target">Object to provide target.</param>
            <returns>Current cotainer to execute next actions.</returns>
        </member>
        <member name="M:Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping.ToSelf">
            <summary>
            Maps target of <paramref name="model" /> to self type (type set in the first step of the registration).
            </summary>
            <returns>Current cotainer to execute next actions.</returns>
        </member>
        <member name="T:Neptuo.Activators._DependencyContainerExtensions.DependencyRegistration">
            <summary>
            Internal implementation of <see cref="T:Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping"/> and <see cref="T:Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping"/>.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.TransientWorkerHandler">
            <summary>
            Wrapper which for each call to <see cref="M:Neptuo.AppServices.Handlers.IBackgroundHandler.Invoke"/> creates new instance of inner handler.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.IBackgroundHandler">
            <summary>
            Base contract for invokable service running in background.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.IBackgroundHandler.Invoke">
            <summary>
            Should to it's stuff.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.TransientWorkerHandler.#ctor(Neptuo.Activators.IActivator{Neptuo.AppServices.Handlers.IBackgroundHandler})">
            <summary>
            Creaties new instance which for each call to <see cref="M:Neptuo.AppServices.Handlers.IBackgroundHandler.Invoke"/> 
            creates new instance of inner handler using <paramref name="activator"/>.
            </summary>
            <param name="activator">Activator for inner handler instances.</param>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.IServiceHandler">
            <summary>
            Base contract for application service.
            </summary>
        </member>
        <member name="T:Neptuo.IDisposable">
            <summary>
            Extended <see cref="T:System.IDisposable"/> with flag whether obect is already disposed.
            </summary>
        </member>
        <member name="P:Neptuo.IDisposable.IsDisposed">
            <summary>
            <c>true</c> if object is already disposed; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.IServiceHandler.Start">
            <summary>
            Starts service.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.IServiceHandler.Stop">
            <summary>
            Stops service.
            </summary>
        </member>
        <member name="P:Neptuo.AppServices.Handlers.IServiceHandler.IsRunning">
            <summary>
            Gets current service state.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.TimerServiceHandler">
            <summary>
            Periodical service handler based on timer.
            To execute periodical action, override method <see cref="M:Neptuo.AppServices.Handlers.TimerServiceHandler.OnInvoke"/>.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.ServiceHandlerBase">
            <summary>
            Base implementation of <see cref="T:Neptuo.AppServices.Handlers.IServiceHandler"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.DisposableBase">
            <summary>
            Base class for implementing <see cref="T:Neptuo.IDisposable"/>.
            Provides posibility to distinguish between disposiing managed and unmanaged resources.
            Provides flag to see if object is already disposed.
            Once object is disposed, calling <see cref="!:IDisposable.Disponse"/> has no effect.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.DisposableBase.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.DisposableBase.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.DisposableBase.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.ServiceHandlerBase.OnStart">
            <summary>
            Invoked when service is starting from stopped state.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.ServiceHandlerBase.OnStop">
            <summary>
            Invoked when service is stopping from running state.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.TimerServiceHandler.#ctor(System.TimeSpan)">
            <summary>
            Creates new instance, that first runs immediately after service start and than every <paramref name="interval"/>.
            </summary>
            <param name="interval">Amount of time between executions.</param>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.TimerServiceHandler.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance, that first runs <paramref name="startDelay"/> after service start and than every <paramref name="interval"/>.
            </summary>
            <param name="startDelay">Amount of time to first execute after service start.</param>
            <param name="interval">Amount of time between executions.</param>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.TimerServiceHandler.OnInvoke">
            <summary>
            Method invoked in defined period.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.Behaviors.Hosting.Reflection.ReflectionReprocessBehaviorInstanceProvider">
            <summary>
            Instance provider for <see cref="T:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior"/> and <see cref="T:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider">
            <summary>
            Provides instance of behavior.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider.TryProvide(Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionContext,System.Type)">
            <summary>
            Tries to create instance of <paramref name="behaviorType"/>.
            </summary>
            <param name="context">Reflection context.</param>
            <param name="behaviorType">Behavior type to create instance of.</param>
            <returns>Instance of <paramref name="behaviorType"/>; <c>null</c> to execute next provider.</returns>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.Behaviors.Processing.WorkerPipelineHandler`1">
            <summary>
            Base class for behaviors processing integration.
            </summary>
            <typeparam name="T">Type of inner handler.</typeparam>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.PipelineBase`1">
            <summary>
            Base implementation of pipeline that operates on handler of type <typeparamref name="T"/>.
            Integrates execution of behaviors during handler execution.
            </summary>
            <typeparam name="T">Type of handler.</typeparam>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineBase`1.GetHandlerFactory">
            <summary>
            Gets factory for handlers of type <typeparamref name="T"/>.
            </summary>
            <returns>Factory for handlers of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineBase`1.GetBehaviors">
            <summary>
            Gets enumeration of behaviors for handler of type <typeparamref name="T"/>.
            </summary>
            <returns>Enumeration of behaviors for handler of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineBase`1.GetBehaviorContext(System.Collections.Generic.IEnumerable{Neptuo.ComponentModel.Behaviors.IBehavior{`0}},`0)">
            <summary>
            Should create instance of <see cref="T:Neptuo.ComponentModel.Behaviors.IBehaviorContext"/> for <paramref name="behaviors"/> and <paramref name="handler"/>.
            </summary>
            <param name="behaviors">Enumeration of behaviors for current handler.</param>
            <param name="handler">Inner handler of current pipeline.</param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineBase`1.ExecutePipelineAsync">
            <summary>
            Executed behavior list.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.IBehavior`1">
            <summary>
            Integrates logic into execution pipeline.
            </summary>
            <typeparam name="T">Type of required behavior interface.</typeparam>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.IBehavior`1.ExecuteAsync(`0,Neptuo.ComponentModel.Behaviors.IBehaviorContext)">
            <summary>
            Invoked when processing pipeline.
            </summary>
            <param name="handler">Behavior interface.</param>
            <param name="context">Current behavior context.</param>
        </member>
        <member name="T:Neptuo.AppServices.ServiceHandlerCollection">
            <summary>
            Registry for <see cref="T:Neptuo.AppServices.Handlers.IServiceHandler"/>.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.ServiceHandlerCollection.Add(Neptuo.AppServices.Handlers.IServiceHandler)">
            <summary>
            Adds service.
            </summary>
            <param name="service">Service to add.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.AppServices.DefaultServiceContainer">
            <summary>
            Describes container for application services.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.DefaultServiceContainer.#ctor(Neptuo.AppServices.Handlers.IServiceHandler)">
            <summary>
            Creates new instance for service <paramref name="service"/>.
            </summary>
            <param name="service">Root service to manage by this container.</param>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.ThreadServiceHandler">
            <summary>
            Defines service running in its own thread.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.ThreadServiceHandler.#ctor">
            <summary>
            Creates new instance, which waits for one minute to shutdown its thread.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.ThreadServiceHandler.#ctor(System.TimeSpan)">
            <summary>
            Creates new instance with <paramref name="stopTimeout"/> to wait for shutdown its thread.
            </summary>
            <param name="stopTimeout">Amount of time to wait for shutdown its thread.</param>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.ThreadServiceHandler.OnInvoke(System.Threading.WaitHandle)">
            <summary>
            Implementation should do it's work on custom thread.
            </summary>
            <param name="shutdownHandle"></param>
        </member>
        <member name="T:Neptuo.AppServices.Triggers.IServiceTrigger">
            <summary>
            Service execution trigger.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Triggers.IServiceTrigger.Start">
            <summary>
            Start trigger listening.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Triggers.IServiceTrigger.Stop">
            <summary>
            Stop trigger listening.
            </summary>
        </member>
        <member name="E:Neptuo.AppServices.Triggers.IServiceTrigger.OnTrigger">
            <summary>
            On trigger hit.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Triggers.TimerServiceTrigger">
            <summary>
            Implementation of <see cref="T:Neptuo.AppServices.Triggers.IServiceTrigger"/> for <see cref="T:System.Threading.Timer"/> and specified interval.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Triggers.TimerServiceTrigger.#ctor(System.TimeSpan)">
            <summary>
            Creates new instance which is triggered every <paramref name="interval"/>.
            </summary>
            <param name="interval">Amount of time between trigger hits.</param>
        </member>
        <member name="M:Neptuo.AppServices.Triggers.TimerServiceTrigger.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance, that is first hit <paramref name="startDelay"/> after service start and than every <paramref name="interval"/>.
            </summary>
            <param name="startDelay">Amount of time to first trigger hit after start.</param>
            <param name="interval">Amount of time between executions.</param>
        </member>
        <member name="M:Neptuo.AppServices.WorkerServiceCollection.AddHandler(Neptuo.AppServices.Triggers.IServiceTrigger,Neptuo.AppServices.Handlers.IBackgroundHandler)">
            <summary>
            Adds worker.
            </summary>
            <param name="trigger">Invocation trigger.</param>
            <param name="worker">Worker to add.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.AppServices._WorkerServiceCollectionExtensions">
            <summary>
            Common trigger extensions for <see cref="T:Neptuo.AppServices.WorkerServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices._WorkerServiceCollectionExtensions.AddIntervalHandler(Neptuo.AppServices.WorkerServiceCollection,System.TimeSpan,Neptuo.AppServices.Handlers.IBackgroundHandler)">
            <summary>
            Adds <paramref name="handler"/> triggered every <paramref name="interval"/>.
            </summary>
            <param name="collection">Target collection of background workers.</param>
            <param name="interval">Amount of time between trigger hits.</param>
            <param name="handler">Handler to execute.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.AppServices._WorkerServiceCollectionExtensions.AddIntervalDelayedHandler(Neptuo.AppServices.WorkerServiceCollection,System.TimeSpan,System.TimeSpan,Neptuo.AppServices.Handlers.IBackgroundHandler)">
            <summary>
            Adds <paramref name="handler"/> triggered every <paramref name="interval"/>.
            </summary>
            <param name="collection">Target collection of background workers.</param>
            <param name="startDelay">Amount of time to first trigger hit after start.</param>
            <param name="interval">Amount of time between trigger hits.</param>
            <param name="handler">Handler to execute.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Collections.ObjectModel.SortableObservableCollection`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an item.</param>
        </member>
        <member name="M:Neptuo.Collections.ObjectModel.SortableObservableCollection`1.SortDescending``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an item.</param>
        </member>
        <member name="M:Neptuo.Collections.ObjectModel.SortableObservableCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an item.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
        </member>
        <member name="M:Neptuo.Collections.ObjectModel.SortableObservableCollection`1.SortDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="keySelector">A function to extract a key from an item.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param>
        </member>
        <member name="M:Neptuo.Collections.ObjectModel.SortableObservableCollection`1.InternalSort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Moves the items of the collection so that their orders are the same as those of the items provided.
            </summary>
            <param name="sortedItems">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders.</param>
        </member>
        <member name="T:Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator`2">
            <summary>
            Factory for dictionaries that creates concurrent of not concurrent instances based on configuration,
            either ctor parameter or <c>Environment.WithIsConcurrentApplication</c>.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="T:Neptuo.Activators.IActivator`1">
            <summary>
            Activator for <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Type of service to create.</typeparam>
        </member>
        <member name="M:Neptuo.Activators.IActivator`1.Create">
            <summary>
            Creates service of type <typeparamref name="T"/>.
            </summary>
            <returns>Service of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="P:Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator`2.Instance">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="T:Neptuo.Collections.Specialized.IKeyValueCollection">
            <summary>
            Key/value collection.
            </summary>
        </member>
        <member name="T:Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection">
            <summary>
            Readonly version of keyed collection.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection.TryGet``1(System.String,``0@)">
            <summary>
            Tries to get value associated with <paramref name="key"/>.
            </summary>
            <typeparam name="T">Required value type.</typeparam>
            <param name="key">Key which value should be returned.</param>
            <param name="value">Output value associted with <paramref name="key"/>.</param>
            <returns><c>true</c> if collection contains value with <paramref name="key"/> as key; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection.Keys">
            <summary>
            Gets enumeration of known key in collection.
            This probably doesn't return all keys that can be found in collection, 
            this fact is caused by possible implementations with 'provider pattern'.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.IKeyValueCollection.Set(System.String,System.Object)">
            <summary>
            Associates <paramref name="value"/> with <paramref name="key"/> in collection.
            If collection already contains <paramref name="key"/>, implementation should override current values with <paramref name="value"/>.
            </summary>
            <param name="key">Key to associate <paramref name="value"/> with.</param>
            <param name="value">New value of <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Neptuo.Collections.Specialized.KeyValueCollection">
            <summary>
            Base implementation of <see cref="T:Neptuo.Collections.Specialized.IKeyValueCollection"/> using <see cref="!:Dictionary"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.KeyValueCollection.TryGetDefault``1(System.String,``0@)">
            <summary>
            Called when trying to read key which is not present in the collection.
            </summary>
            <typeparam name="T">Required value type.</typeparam>
            <param name="key">Key which value should be returned.</param>
            <param name="value">Output value associted with <paramref name="key"/>.</param>
            <returns><c>true</c> if collection contains value with <paramref name="key"/> as key; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.Collections.Specialized.KeyValueCollection.ConvertTo``1(System.Object,``0@)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Required value type.</typeparam>
            <param name="sourceValue">Value from the collection.</param>
            <param name="value"><paramref name="sourceValue" /> in the required type.</param>
            <returns><c>true</c> if conversion was successfull; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Neptuo.Collections.Specialized.KeyValueCollection.IsReadOnly">
            <summary>
            Whether this collection can be modified.
            </summary>
        </member>
        <member name="T:Neptuo.Collections.Specialized.NameValueDictionary">
            <summary>
            Wraps instance of <see cref="T:System.Collections.Specialized.NameValueCollection"/> as <see cref="!:IReadOnlyDictionary"/>.
            </summary>
            <remarks>
            Only CopyTo is not implemented!
            </remarks>
        </member>
        <member name="F:Neptuo.Collections.Specialized.NameValueDictionary.source">
            <summary>
            Source values collection.
            </summary>
        </member>
        <member name="F:Neptuo.Collections.Specialized.NameValueDictionary.allValues">
            <summary>
            Cached all source values.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.NameValueDictionary.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates new instance with <see cref="F:Neptuo.Collections.Specialized.NameValueDictionary.source"/> as source values collection.
            </summary>
            <param name="source">Source values collection</param>
        </member>
        <member name="T:Neptuo.Collections.Specialized.NameValueEnumerator">
            <summary>
            Enumerator for <see cref="T:Neptuo.Collections.Specialized.NameValueDictionary"/> or <see cref="T:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary">
            <summary>
            Wraps instance of <see cref="T:System.Collections.Specialized.NameValueCollection"/> as <see cref="!:IReadOnlyDictionary"/>.
            </summary>
        </member>
        <member name="F:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary.source">
            <summary>
            Source values collection.
            </summary>
        </member>
        <member name="F:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary.allValues">
            <summary>
            Cached all source values.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates new instance with <see cref="F:Neptuo.Collections.Specialized.NameValueReadOnlyDictionary.source"/> as source values collection.
            </summary>
            <param name="source">Source values collection</param>
        </member>
        <member name="T:Neptuo.Collections.Specialized.ProviderKeyValueCollection">
            <summary>
            Extensible <see cref="T:Neptuo.Collections.Specialized.IKeyValueCollection"/>.
            When reading value, which has not been set yet, calls registered provider.
            Providers are of the two groups (distinguished by registration):
            a) for specific key (registered with key).
            b) general (for all keys).
            When trying to get value which key is not present, 
            first gets called provider registered with specific key, 
            than those registered without key.
            This collection also supports set listeners after set value in collection,
            these listener can be attached to specific key or to any key.
            </summary>
        </member>
        <member name="F:Neptuo.Collections.Specialized.ProviderKeyValueCollection.providerStorage">
            <summary>
            Backing storage for providers.
            </summary>
        </member>
        <member name="F:Neptuo.Collections.Specialized.ProviderKeyValueCollection.listenerStorage">
            <summary>
            Backing storage for listeners.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized.ProviderKeyValueCollection.AddProvider(Neptuo.OutFunc{System.String,System.Object,System.Boolean})">
            <summary>
            Adds <paramref name="provider"/> for any key.
            This provider will be called after providers registered for specific key.
            </summary>
            <param name="provider">Provider for getting values.</param>
        </member>
        <member name="M:Neptuo.Collections.Specialized.ProviderKeyValueCollection.AddProvider(System.String,Neptuo.OutFunc{System.String,System.Object,System.Boolean})">
            <summary>
            Adds <paramref name="provider"/> for specific key.
            </summary>
            <param name="key">Key for which <paramref name="provider"/> will be executed.</param>
            <param name="provider">Provider for getting values.</param>
        </member>
        <member name="M:Neptuo.Collections.Specialized.ProviderKeyValueCollection.AddListener(System.Action{System.String,System.Object})">
            <summary>
            Adds listener after setting value (with any key).
            </summary>
            <param name="listener">Listener executed after setting value.</param>
        </member>
        <member name="M:Neptuo.Collections.Specialized.ProviderKeyValueCollection.AddListener(System.String,System.Action{System.String,System.Object})">
            <summary>
            Adds listener after setting value (with any key).
            </summary>
            <param name="key">Key for which <paramref name="listener"/> will be executed.</param>
            <param name="listener">Listener executed after setting value.</param>
        </member>
        <member name="T:Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions">
            <summary>
            Some common extensions.
            </summary>
        </member>
        <member name="M:Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions.Get``1(Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection,System.String)">
            <summary>
            Reads the value of <paramref name="key"/> in <paramref name="collection"/>.
            If value is found and can be converted to <typeparamref name="T"/>, returns it.
            Otherwise throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="collection">Collection of key-value pairs.</param>
            <param name="key">Requested key.</param>
            <param name="defaultValue">Optional default value if is not found or not convertible.</param>
            <returns>Value of <paramref name="key"/> in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions.Get``1(Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection,System.String,``0)">
            <summary>
            Reads the value of <paramref name="key"/> in <paramref name="collection"/>.
            If value is found and can be converted to <typeparamref name="T"/>, returns it.
            Otherwise returns <paramref name="defaultValue"/> (if provided) or throws <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="collection">Collection of key-value pairs.</param>
            <param name="key">Requested key.</param>
            <param name="defaultValue">Optional default value if is not found or not convertible.</param>
            <returns>Value of <paramref name="key"/> in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions.Has(Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection,System.String)">
            <summary>
            Returns <c>true</c> if <paramref name="collection"/> contains <paramref name="key"/>.
            </summary>
            <param name="collection">Collection of key-value pairs.</param>
            <param name="key">Requested key.</param>
            <returns><c>true</c> if <paramref name="collection"/> contains <paramref name="key"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Neptuo.Collections._EnvironmentExtensions">
            <summary>
            Common extensions for <see cref="!:EngineEvironment"/> for 
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.Compiler">
            <summary>
            Internal implementation of <see cref="T:Neptuo.Compilers.IStaticCompiler"/> and <see cref="T:Neptuo.Compilers.IDynamicCompiler"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.CompilerConfigurationWrapper">
            <summary>
            Base class for wrapping configuration.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.ICompilerConfiguration">
            <summary>
            Compiler configurable settings.
            </summary>
        </member>
        <member name="T:Neptuo.ICloneable`1">
            <summary>
            Provides ability to clone object or clone to instance of another type.
            </summary>
            <typeparam name="T">Target object type.</typeparam>
        </member>
        <member name="M:Neptuo.ICloneable`1.Clone">
            <summary>
            Creates new instance of type <typeparamref name="T"/> based on state of current object.
            </summary>
            <returns>New instance of type <typeparamref name="T"/> based on state current object.</returns>
        </member>
        <member name="M:Neptuo.Compilers.CompilerConfigurationWrapper.#ctor">
            <summary>
            Creates empty instance with empty configuration.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerConfigurationWrapper.#ctor(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Creates instance and copies configuration from <paramref name="configuration"/>.
            </summary>
            <param name="configuration">Configuration to copy values from.</param>
        </member>
        <member name="P:Neptuo.Compilers.CompilerConfigurationWrapper.Configuration">
            <summary>
            Compiler configuration.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.IStaticCompiler">
            <summary>
            Compiles assemblies to the file system.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.IDynamicCompiler">
            <summary>
            Compiles in-memory assemblies.
            </summary>
        </member>
        <member name="F:Neptuo.Compilers.Compiler.provider">
            <summary>
            Inner code provider.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.CompilerConfiguration">
            <summary>
            Configuration of the compiler.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerConfiguration.#ctor">
            <summary>
            Creates empty configuration.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerConfiguration.#ctor(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Creates new instance from <paramref name="parentConfiguration"/>.
            </summary>
            <param name="parentConfiguration">Source configuration values.</param>
        </member>
        <member name="M:Neptuo.Compilers.CompilerConfiguration.Copy">
            <summary>
            Creates deep copy of this instance.
            </summary>
            <returns>New instance with values copied from this instance.</returns>
        </member>
        <member name="T:Neptuo.Compilers.CompilerFactory">
            <summary>
            Factory for predefining and preconfiguring compilers (both dynamic and static).
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerFactory.#ctor">
            <summary>
            Creates new empty instance.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerFactory.#ctor(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Creates new instance and copies initial configuration from <paramref name="configuration"/>.
            </summary>
            <param name="configuration">Initial configuration.</param>
        </member>
        <member name="M:Neptuo.Compilers.CompilerFactory.CreateDynamic">
            <summary>
            Creates compiler for in-memory assembly compilation.
            </summary>
            <returns>In-memory compiler.</returns>
        </member>
        <member name="M:Neptuo.Compilers.CompilerFactory.CreateStatic">
            <summary>
            Creates compiler for compiling assemblies to the file system.
            </summary>
            <returns>Compiler for compiling assemblies to the file system.</returns>
        </member>
        <member name="M:Neptuo.Compilers.CompilerFactory.CopyConfiguration">
            <summary>
            Returns copy of current configuration.
            </summary>
            <returns>Copy of current configuration.</returns>
        </member>
        <member name="T:Neptuo.Compilers.CompilerReferenceCollection">
            <summary>
            Collection of compiler references.
            </summary>
        </member>
        <member name="F:Neptuo.Compilers.CompilerReferenceCollection.assemblies">
            <summary>
            List of referenced assemblies.
            </summary>
        </member>
        <member name="F:Neptuo.Compilers.CompilerReferenceCollection.directories">
            <summary>
            List of referenced directories.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerReferenceCollection.#ctor">
            <summary>
            Creates empty collection.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerReferenceCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates collection with references copied from <paramref name="assemblies"/> and <paramref name="directories"/>.
            </summary>
            <param name="assemblies">Enumeration of referenced assemblies.</param>
            <param name="directories">Enumeration of referenced directories.</param>
        </member>
        <member name="P:Neptuo.Compilers.CompilerReferenceCollection.Assemblies">
            <summary>
            Enumerates referenced assemblies.
            </summary>
        </member>
        <member name="P:Neptuo.Compilers.CompilerReferenceCollection.Directories">
            <summary>
            Enumerates referenced directories.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.CompilerResult">
            <summary>
            Internal implementation of <see cref="T:Neptuo.Compilers.ICompilerResult"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Compilers.ICompilerResult">
            <summary>
            Result from compiling assemblies using <see cref="T:Neptuo.Compilers.IDynamicCompiler"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Compilers.ICompilerResult.IsSuccess">
            <summary>
            If <c>true</c>, compilation was successfull; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:Neptuo.Compilers.ICompilerResult.Errors">
            <summary>
            Enumeration of compilation errors.
            May also contain warnings (for success <see cref="P:Neptuo.Compilers.ICompilerResult.IsSuccess"/>).
            </summary>
        </member>
        <member name="M:Neptuo.Compilers.CompilerResult.#ctor(System.Collections.Specialized.StringCollection)">
            <summary>
            Creates success instance.
            </summary>
            <param name="output">Raw compiler output.</param>
        </member>
        <member name="M:Neptuo.Compilers.CompilerResult.#ctor(System.Collections.Generic.IEnumerable{Neptuo.ComponentModel.IErrorInfo},System.Collections.Specialized.StringCollection)">
            <summary>
            If <paramref name="errors"/> is empty, than success. Otherwise not-success.
            </summary>
            <param name="errors">Enumeration of compilation errors.</param>
            <param name="output">Raw compiler output.</param>
        </member>
        <member name="T:Neptuo.Compilers._CompilerConfigurationExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.Compilers.ICompilerConfiguration"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.References(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Returns collection of references.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <returns>Collection of references.</returns>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.References(Neptuo.Compilers.ICompilerConfiguration,Neptuo.Compilers.CompilerReferenceCollection)">
            <summary>
            Sets collection of references.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <param name="references">Collection of references.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.IsDebugMode(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Returns whether debug mode is enabled.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <rereturns>Whether debug mode is enabled.</rereturns>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.IsDebugMode(Neptuo.Compilers.ICompilerConfiguration,System.Boolean)">
            <summary>
            Sets whether debug mode is enabled.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <param name="isDebugMode">New value for debug mode.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.TempDirectory(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Returns path to temp directory.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <returns>Path to temp directory.</returns>
        </member>
        <member name="M:Neptuo.Compilers._CompilerConfigurationExtensions.TempDirectory(Neptuo.Compilers.ICompilerConfiguration,System.String)">
            <summary>
            Sets path to temp directory.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <param name="tempDirectory">Path to temp directory.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.Compilers._CompilerReferenceCollectionExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.Compilers.CompilerReferenceCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Compilers._CompilerReferenceCollectionExtensions.AddDirectories(Neptuo.Compilers.CompilerReferenceCollection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds enumeration of bin directories to reference collection.
            </summary>
            <param name="collection">Target collection of references.</param>
            <param name="binDirectories">Enumeration of directories to add.</param>
            <returns><paramref name="collection"/> (for fluency).</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.BehaviorProviderCollection">
            <summary>
            Base implementation using list of providers.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.IBehaviorCollection">
            <summary>
            Provides mappings between behavior interface contract and actual implementation type.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.IBehaviorCollection.Add(Neptuo.ComponentModel.Behaviors.Providers.IBehaviorProvider)">
            <summary>
            Adds provider for behaviors.
            </summary>
            <param name="provider">Behavior provider.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.IBehaviorCollection.GetBehaviors(System.Type)">
            <summary>
            Gets registered behaviors for handler of type <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Handler type.</param>
            <returns>Registered behaviors for handler of type <paramref name="handlerType"/>.</returns>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.BehaviorProviderCollection.providers">
            <summary>
            List of registered behavior providers.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.BehaviorProviderCollection.Add(Neptuo.ComponentModel.Behaviors.Providers.IBehaviorProvider)">
            <summary>
            Adds new provider.
            </summary>
            <param name="provider">New behavior provider.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.BehaviorProviderCollection.GetBehaviors(System.Type)">
            <summary>
            Gets registered behavior types for <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Handler type.</param>
            <returns>Registered behavior types for <paramref name="handlerType"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.IBehaviorContext"/>.
            </summary>
            <typeparam name="T">Type of handler for behaviors to operate over.</typeparam>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.IBehaviorContext">
            <summary>
            Provides access to currently executing pipeline.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.IBehaviorContext.NextAsync">
            <summary>
            Promotes execution to next behavior in pipeline.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.IBehaviorContext.CustomValues">
            <summary>
            Collection of custom context values.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.SetCustomValues(Neptuo.Collections.Specialized.IKeyValueCollection)">
            <summary>
            Sets collection of custom values.
            If <paramref name="customValues"/> is <c>null</c>, new (empty) collection is created.
            </summary>
            <param name="customValues">New custom values collection.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.SetNextAsyncWhenNoMoreBehaviors(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Sets optional delegate, called when no more behaviors are available and NextAsync is called.
            </summary>
            <param name="nextAsyncWhenNoMoreBehaviors">Delegate to be execute when no more behaviors are available.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.NextAsyncWhenNoMoreBehaviors">
            <summary>
            Called when <see cref="M:Neptuo.ComponentModel.Behaviors.IBehaviorContext.NextAsync"/> is called, but no more behaviors are available.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.Handler">
            <summary>
            Target handler.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.Behaviors">
            <summary>
            Enumeration of current behaviors.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.NextBehaviorIndex">
            <summary>
            Index of next behavior.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.DefaultBehaviorContext`1.OnNextAsyncWhenNoMoreBehaviors">
            <summary>
            Optional delegate, called when no more behaviors are available and NextAsync is called.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomDefaultBehaviorInstanceGenerator">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator"/> for parameterless constructors.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator">
            <summary>
            Generates code for creating behavior instance.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator.TryGenerate(Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomContext,System.Type)">
            <summary>
            Tries to generate expression for creating instance of <paramref name="behaviorType"/>.
            </summary>
            <param name="context">Code dom context.</param>
            <param name="behaviorType">Behavior type to create instance of.</param>
            <returns>Expression which returns instance of <paramref name="behaviorType"/>; <c>null</c> to execute next generator.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomDefaultContext">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomContext"/>
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomContext">
            <summary>
            Base context for code dom generators.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomContext.Configuration">
            <summary>
            Pipeline configuration.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomContext.HandlerType">
            <summary>
            Type of handler to wrap.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation._CodeDomPipelineConfigurationExtensions">
            <summary>
            Extensions for compiler configuration for pipeline compilation.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation._CodeDomPipelineConfigurationExtensions.BaseType(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Returns required pipeline base type.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <returns>Required pipeline base type.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation._CodeDomPipelineConfigurationExtensions.BaseType(Neptuo.Compilers.ICompilerConfiguration,System.Type)">
            <summary>
            Sets equired pipeline base type.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <param name="baseType">Required pipeline base type.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation._CodeDomPipelineConfigurationExtensions.BehaviorInstance(Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Returns registry for behavior instance generators.
            </summary>
            <param name="configuration">Compiler configuration.</param>
            <returns>Registry for behavior instance generators.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomBehaviorInstanceRegistry">
            <summary>
            Registry for <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator"/> by behavior type.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomBehaviorInstanceRegistry.AddGenerator(System.Type,Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator)">
            <summary>
            Maps <paramref name="behaviorType"/> to be processed by <paramref name="generator" />
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomBehaviorInstanceRegistry.AddSearchHandler(System.Func{System.Type,Neptuo.ComponentModel.Behaviors.Processing.Compilation.ICodeDomBehaviorInstanceGenerator})">
            <summary>
            Adds <paramref name="searchHandler"/> to be executed when generator was not found.
            (Last registered is executed the first).
            </summary>
            <param name="searchHandler">Generator provider method.</param>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.DefaultPipeline`1">
            <summary>
            Creates behaviors using <see cref="T:System.Activator"/>.
            Handler must have parameterless construtor.
            </summary>
            <typeparam name="T">Type of handler.</typeparam>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.DefaultPipelineBase`1">
            <summary>
            Pipeline for handlers with parameterless constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.DefaultPipeline`1.#ctor(Neptuo.ComponentModel.Behaviors.IBehaviorCollection,Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider)">
            <summary>
            Creates new instance.
            </summary>
            <param name="collection">Behavior collection.</param>
            <param name="behaviorInstance">Behavior instance provider.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.DefaultPipeline`1.GetBehaviors">
            <summary>
            Creates behaviors using <see cref="T:System.Activator"/>.
            Returns enumeration of haviors for <typeparamref name="T"/>.
            </summary>
            <returns>Enumeration of haviors for <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.DefaultReflectionBehaviorInstanceProvider">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider"/> which uses <see cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionContext">
            <summary>
            Base context for reflection providers.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionContext.HandlerType">
            <summary>
            Type of handler to wrap.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.DefaultReflectionContext">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionContext"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.ReflectionBehaviorInstanceRegistry">
            <summary>
            Registry for <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider"/> by behavior type.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Reflection.ReflectionBehaviorInstanceRegistry.AddProvider(System.Type,Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider)">
            <summary>
            Maps <paramref name="behaviorType"/> to be processed by <paramref name="provider" />
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Reflection.ReflectionBehaviorInstanceRegistry.AddSearchHandler(System.Func{System.Type,Neptuo.ComponentModel.Behaviors.Processing.Reflection.IReflectionBehaviorInstanceProvider})">
            <summary>
            Adds <paramref name="searchHandler"/> to be executed when generator was not found.
            (Last registered is executed the first).
            </summary>
            <param name="searchHandler">Generator provider method.</param>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors._BehaviorContextExtensions">
            <summary>
            Extensions for custom values in <see cref="T:Neptuo.ComponentModel.Behaviors.IBehaviorContext"/>.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices._EnvironmentExtensions">
            <summary>
            Behaviors.Processing extensions for <see cref="T:Neptuo.EngineEnvironment"/>.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseAppServices(Neptuo.EngineEnvironment)">
            <summary>
            Registers app services.
            </summary>
            <param name="environment">Engine environment.</param>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseBehaviors(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment,Neptuo.ComponentModel.Behaviors.IBehaviorCollection)">
            <summary>
            Registers singleton behaviors collection.
            </summary>
            <param name="appService">Engine environment.</param>
            <param name="behaviors">Behaviors collection.</param>
            <returns><paramref name="appService"/>.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseBehaviors(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment,Neptuo.ComponentModel.Behaviors.Providers.IBehaviorProvider[])">
            <summary>
            Registers behaviors collection.
            </summary>
            <param name="appService">Engine environment.</param>
            <param name="providers">List of behavior providers to add.</param>
            <returns><paramref name="appService"/>.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseBehaviors(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment,System.Action{Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider})">
            <summary>
            Registers behaviors collection, add enpoint behaviors and invokes <paramref name="mapper"/> to map interface behaviors.
            </summary>
            <param name="appService">Engine environment.</param>
            <param name="mapper">Interface behavior mapper.</param>
            <returns><paramref name="appService"/>.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.WithAppServices(Neptuo.EngineEnvironment)">
            <summary>
            Returns registration of app services.
            </summary>
            <param name="environment">Engine environment.</param>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.WithBehaviors(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment)">
            <summary>
            Tries to retrieve behaviors collection.
            </summary>
            <param name="appService">Engine environment.</param>
            <returns>Registered behaviors collection.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseCodeDomConfiguration(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment,Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Registers singleton code dom pipeline configuration.
            </summary>
            <param name="appService">Engine environment.</param>
            <param name="configuration">Code dom pipeline configuration.</param>
            <returns><paramref name="appService"/>.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.UseCodeDomConfiguration(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment,System.Type,System.String,System.String[])">
            <summary>
            Registers singleton code dom pipeline configuration.
            </summary>
            <param name="appService">Engine environment.</param>
            <param name="baseType">Custom base type (extending <see cref="!:DefaultPipelineBase&lt;T&gt;"/>).</param>
            <param name="tempDirectory">Path to temp directory.</param>
            <param name="binDirectories">List of bin directories to add as references.</param>
            <returns><paramref name="appService"/>.</returns>
        </member>
        <member name="M:Neptuo.AppServices._EnvironmentExtensions.WithCodeDomConfiguration(Neptuo.AppServices._EnvironmentExtensions.AppServiceEngineEnvironment)">
            <summary>
            Tries to retrieve code dom pipeline configuration.
            </summary>
            <param name="environment">Engine environment.</param>
            <returns>Registered code dom pipeline configuration.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1">
            <summary>
            Generates pipeline using <see cref="N:System.CodeDom"/>.
            </summary>
            <typeparam name="T">Base type (or required interface) of generated type.</typeparam>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.handlerType">
            <summary>
            Handler type.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.generatedFactory">
            <summary>
            Function that creates instance of pipeline.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.behaviorCollection">
            <summary>
            Behavior collection.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.configuration">
            <summary>
            Generator configuration.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.#ctor(System.Type,Neptuo.ComponentModel.Behaviors.IBehaviorCollection,Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Creates new instance for handler of type <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Handler type.</param>
            <param name="behaviorCollection">Behavior collection.</param>
            <param name="configuration">Generator configuration.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.Create">
            <summary>
            Cretes instance of generated pipeline.
            </summary>
            <returns>Instance of generated pipeline.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.EnsurePipelineFactory">
            <summary>
            Ensures that pipeline factory is created.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineFactory`1.GeneratePipelineFactory">
            <summary>
            Creates pipeline factory using <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator">
            <summary>
            CodeDom generator for pipelines based on concrete handlert type.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.resultListName">
            <summary>
            Name of variable containing behaviors in GetBehavior method of PipelineBase.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.handlerType">
            <summary>
            Target handler type.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.behaviorCollection">
            <summary>
            Behavior collection.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.compilerFactory">
            <summary>
            Factory for code compilers.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.configuration">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.#ctor(System.Type,Neptuo.ComponentModel.Behaviors.IBehaviorCollection,Neptuo.Compilers.ICompilerConfiguration)">
            <summary>
            Creates new instance for <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Target handler type.</param>
            <param name="behaviorCollection">Behavior collection.</param>
            <param name="configuration">Generator configuration.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.GeneratePipeline">
            <summary>
            Generates dynamicly pipeline type for handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.CreateUnit">
            <summary>
            Creates code compile unit.
            </summary>
            <returns>Code compile unit.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.CreateNamespace">
            <summary>
            Creates code namespace for pipeline type.
            </summary>
            <returns>Code namespace for pipeline type.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.CreateType">
            <summary>
            Creates empty pipeline type base on <see cref="T:Neptuo.ComponentModel.Behaviors.Processing.DefaultPipelineBase`1"/>.
            </summary>
            <returns>Empty pipeline type.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.CreateBehaviorMethod" -->
        <!-- Badly formed XML comment ignored for member "M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.GenerateBehaviorMethodBody(System.CodeDom.CodeMemberMethod)" -->
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.CompileCodeUnit(System.CodeDom.CodeCompileUnit)">
            <summary>
            Compiles <paramref name="unit"/> and returns generated assembly.
            </summary>
            <param name="unit">Source code compile unit.</param>
            <returns>Generated assembly.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.FormatPipelineTypeName">
            <summary>
            Formats pipeline type based on name of handler type.
            </summary>
            <returns>Pipeline name.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.FormatAssemblyFileName">
            <summary>
            Formats name for generated assembly (only file name with extension).
            </summary>
            <returns>Name for generated assembly.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.Compilation.CodeDomPipelineGenerator.FormatSourceCodeFileName">
            <summary>
            Formats name for generated source code (only file name with extension).
            </summary>
            <returns>Name for generated assesource codembly.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.PipelineException">
            <summary>
            Exception during pipeline factory execution.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineException.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineException.#ctor(System.String)">
            <summary>
            Creates new instance with <paramref name="message"/>.
            </summary>
            <param name="message">Exception description.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new instance from <paramref name="inner"/> with <paramref name="message"/>.
            </summary>
            <param name="message">Exception description.</param>
            <param name="inner">Exception that caused this exception.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates new instance for deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Processing.PipelineFactoryException">
            <summary>
            Exception during pipeline factory execution.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineFactoryException.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineFactoryException.#ctor(System.String)">
            <summary>
            Creates new instance with <paramref name="message"/>.
            </summary>
            <param name="message">Exception description.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new instance from <paramref name="inner"/> with <paramref name="message"/>.
            </summary>
            <param name="message">Exception description.</param>
            <param name="inner">Exception that caused this exception.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Processing.PipelineFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates new instance for deserialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers.AttributeBehaviorProvider">
            <summary>
            Behavior provider based on attribute decoration on handler type.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase">
            <summary>
            Base implementation of <see cref="T:Neptuo.ComponentModel.Behaviors.Providers.IBehaviorProvider"/> based on static mapping 
            between behavior contract and its implementation.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.#ctor">
            <summary>
            Creates new instance with empty mappings.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.InsertOrUpdateMappingInternal(System.Nullable{System.Int32},System.Type,System.Type)">
            <summary>
            If uderlaying storage doesn't contain <paramref name="behaviorContract"/>, new mapping is inserted at index <paramref name="index"/>;
            otherwise existing registration is updated and re-inserted at <paramref name="index"/>.
            </summary>
            <param name="index">Intex to insert mapping at (if <c>null</c>, mapping will be insterted at last index).</param>
            <param name="behaviorContract">Behavior contract type.</param>
            <param name="behaviorImplementation">Behavior implementation type.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.GetBehaviors(System.Type)">
            <summary>
            Calls <see cref="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.GetBehaviors(System.Type)"/> to get behavior implementations for <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Service handler type.</param>
            <returns>Enumeration of behavior implementations for <paramref name="handlerType"/>.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.GetBehaviorInternal(System.Type,System.Collections.Generic.List{Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel})">
            <summary>
            Calls <see cref="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.FindBehaviorContracts(System.Type)"/> and than enumerates registrations for finding implementations.
            If result of <see cref="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.FindBehaviorContracts(System.Type)"/> contains any unregistered behavior, these will be skipped.
            </summary>
            <param name="handlerType">Service handler type.</param>
            <param name="storage">Behavior mapping registrations.</param>
            <returns>Enumeration of behavior implementations for <paramref name="handlerType"/>.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.FindBehaviorContracts(System.Type)">
            <summary>
            In derivered class should return list of behavior definition types for <paramref name="handlerType"/>.
            </summary>
            <param name="handlerType">Service handler type.</param>
            <returns>List of behavior definition types for <paramref name="handlerType"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel">
            <summary>
            Single mapping item.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel.#ctor(System.Type,System.Type)">
            <summary>
            Creates new instance.
            </summary>
            <param name="contract">Behavior contract type.</param>
            <param name="implementation">Behavior implementation type.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel.UpdateImplementation(System.Type)">
            <summary>
            Updates implementation type to <paramref name="implementation"/>.
            </summary>
            <param name="implementation">Behavior implementation type.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel.Contract">
            <summary>
            Behavior contract type.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel.Implementation">
            <summary>
            Behavior implementation type.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider">
            <summary>
            Provides behavior based on implemented interfaces.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider.#ctor">
            <summary>
            Creates empty instance.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider.#ctor(System.Type,System.Type)">
            <summary>
            Creates new instance with <paramref name="behaviorContract"/> as contract and <paramref name="behaviorImplementation"/> as implementation type.
            </summary>
            <param name="behaviorContract">Behavior interface contract.</param>
            <param name="behaviorImplementation">Behavior contract implementor.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider.AddMapping(System.Type,System.Type)">
            <summary>
            Adds mapping with <paramref name="behaviorContract"/> as contract and <paramref name="behaviorImplementation"/> as implementation type.
            </summary>
            <param name="behaviorContract">Behavior interface contract.</param>
            <param name="behaviorImplementation">Behavior contract implementor.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider.InsertMapping(System.Int32,System.Type,System.Type)">
            <summary>
            Adds mapping with <paramref name="behaviorContract"/> as contract and <paramref name="behaviorImplementation"/> as implementation type.
            </summary>
            <param name="index">Index at which to insert behavior mapping.</param>
            <param name="behaviorContract">Behavior interface contract.</param>
            <param name="behaviorImplementation">Behavior contract implementor.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider.GetBehaviorInternal(System.Type,System.Collections.Generic.List{Neptuo.ComponentModel.Behaviors.Providers.MappingBehaviorProviderBase.BehaviorMappingModel})">
            <summary>
            Returns <see cref="!:behaviorImplementation"/> if <paramref name="handlerType"/> implements <see cref="!:behaviorContract"/>; empty enumeration otherwise.
            </summary>
            <param name="handlerType">Handler type.</param>
            <param name="storage">Contract-implementation mappings.</param>
            <returns><see cref="!:behaviorImplementation"/> if <paramref name="handlerType"/> implements <see cref="!:behaviorContract"/>; empty enumeration otherwise.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers._InterfaceBehaviorProviderExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider"/>.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers._InterfaceBehaviorProviderExtensions.AddMapping``2(Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider)">
            <summary>
            Adds mapping with <typeparamref name="TBehaviorContract"/> as contract and <typeparamref name="TBehaviorImplementation"/> as implementation type.
            </summary>
            <typeparam name="TBehaviorContract">Behavior interface contract.</typeparam>
            <typeparam name="TBehaviorImplementation">Behavior contract implementor.</typeparam>
            <returns>Self (for fluency).</returns>>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers._InterfaceBehaviorProviderExtensions.InsertMapping``2(Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider,System.Int32)">
            <summary>
            Adds mapping with <typeparamref name="TBehaviorContract"/> as contract and <typeparamref name="TBehaviorImplementation"/> as implementation type.
            </summary>
            <typeparam name="TBehaviorContract">Behavior interface contract.</typeparam>
            <typeparam name="TBehaviorImplementation">Behavior contract implementor.</typeparam>
            <returns>Self (for fluency).</returns>>
        </member>
        <member name="T:Neptuo.ComponentModel.Behaviors.Providers._BehaviorCollectionExtensions">
            <summary>
            Extensions for <see cref="T:Neptuo.ComponentModel.Behaviors.IBehaviorCollection"/>.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Behaviors.Providers._BehaviorCollectionExtensions.AddInterface``2(Neptuo.ComponentModel.Behaviors.IBehaviorCollection)">
            <summary>
            Adds <see cref="T:Neptuo.ComponentModel.Behaviors.Providers.InterfaceBehaviorProvider"/> with <typeparamref name="TContract"/> as contract interface 
            and <typeparamref name="TImplementation"/> as implementation class.
            </summary>
            <typeparam name="TContract">Contract interface</typeparam>
            <typeparam name="TImplementation">Implementation type.</typeparam>
            <param name="collection">Collection to insert into.</param>
            <returns><paramref name="collection"/> (for fluency).</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Converters.CollectionConverter`1">
            <summary>
            Converter for converting string value (splitted using defined separator) to one of supported collection types.
            </summary>
            <typeparam name="TItemTarget">Target collection item value.</typeparam>
        </member>
        <member name="T:Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions">
            <summary>
            Registration extensions for <see cref="T:Neptuo.ComponentModel.Converters.IConverterRepository"/>.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add``2(Neptuo.ComponentModel.Converters.IConverterRepository,Neptuo.ComponentModel.Converters.IConverter{``0,``1})">
            <summary>
            Registers <paramref name="converter"/> for conversion from <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TTarget">Target type.</typeparam>
            <param name="repository">The repository to register converter to.</param>
            <param name="converter">The converter.</param>
            <returns><paramref name="repository"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.DefaultErrorModel">
            <summary>
            Default extensible implementation of <see cref="T:Neptuo.ComponentModel.IErrorModel"/>.
            This implementation is not thread safe.
            </summary>
        </member>
        <member name="T:Neptuo.FeatureModels.FeatureCollectionModel">
            <summary>
            Implementation of <see cref="T:Neptuo.FeatureModels.IFeatureModel"/> which delegates features to registered objects (with concurrent support.).
            </summary>
        </member>
        <member name="T:Neptuo.FeatureModels.IFeatureModel">
            <summary>
            Describes extensible model.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.IFeatureModel.TryWith``1(``0@)">
            <summary>
            Tries to retrieve object of type <typeparamref name="TFeature"/>.
            If this is possible, returns <c>true</c>; otherwise <c>false</c>.
            </summary>
            <typeparam name="TFeature">Type of feature to retrieve.</typeparam>
            <param name="feature">Output instance of feature; <c>null</c> if not supported.</param>
            <returns><c>true</c> if feature of type <typeparamref name="TFeature"/> is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="F:Neptuo.FeatureModels.FeatureCollectionModel.onSearchFeature">
            <summary>
            Invoked when feature was not found.
            Takes typeof requested feture, should return <c>true</c> to indicate success; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.FeatureCollectionModel.Add(System.Type,System.Object)">
            <summary>
            Adds feature to the collection.
            </summary>
            <param name="featureType">Tyoe if feature.</param>
            <param name="feature">Feature instance.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.FeatureModels.FeatureCollectionModel.AddSearchHandler(Neptuo.OutFunc{System.Type,System.Boolean,System.Object})">
            <summary>
            Registers generic handler for providing feature.
            <paramref name="handler"/> takes typeof requested feature 
            and returns <c>true</c> to indicate success; otherwise <c>false</c>.
            </summary>
            <param name="handler">Handler to register.</param>
        </member>
        <member name="T:Neptuo.ComponentModel.IErrorInfo">
            <summary>
            Describes error info.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.IErrorInfo.LineNumber">
            <summary>
            Line where error occured.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.IErrorInfo.ColumnIndex">
            <summary>
            Column where error occured.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.IErrorInfo.ErrorNumber">
            <summary>
            Error index.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.IErrorInfo.ErrorText">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Converters.IConverterRepository">
            <summary>
            Repository for ceonverters between types.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Converters.IConverterRepository.Add(System.Type,System.Type,Neptuo.ComponentModel.Converters.IConverter)">
            <summary>
            Registers <paramref name="converter"/> for conversion from <paramref name="sourceType"/> to <paramref name="targetType"/>.
            </summary>
            <param name="sourceType">Source type.</param>
            <param name="targetType">Target type.</param>
            <param name="converter">Converter.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Converters.IConverterRepository.TryConvert``2(``0,``1@)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> of type <typeparamref name="TSource"/> to target type <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">Source value type.</typeparam>
            <typeparam name="TTarget">Target value type.</typeparam>
            <param name="sourceValue">Source value.</param>
            <param name="targetValue">Output target value.</param>
            <returns>True if conversion was successfull.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel.Converters.IConverterRepository.TryConvert(System.Type,System.Type,System.Object,System.Object@)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> to target type <paramref name="targetType"/>.
            </summary>
            <param name="sourceType">Type of source value.</param>
            <param name="targetType">Type of target value.</param>
            <param name="sourceValue">Source value.</param>
            <param name="targetValue">Output target value.</param>
            <returns>True if conversion was successfull.</returns>
        </member>
        <member name="E:Neptuo.ComponentModel.Converters.IConverterRepository.OnSearchConverter">
            <summary>
            Event used to find converter for unregistered pair of source and target type.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Converters.ConverterSearchDelegate">
            <summary>
            Delegate for searching for converter.
            </summary>
            <param name="sourceType">Source type.</param>
            <param name="targetType">Targe type.</param>
            <returns>Converter for conversion from <paramref name="sourceType"/> to <paramref name="targetType"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Disposable`1">
            <summary>
            Wrapper for <see cref="T:System.IDisposable"/> to <see cref="T:Neptuo.IDisposable"/>.
            </summary>
            <typeparam name="T">Target disposable type.</typeparam>
        </member>
        <member name="M:Neptuo.ComponentModel.Disposable`1.#ctor(`0)">
            <summary>
            Creates new instance for <paramref name="target"/>.
            </summary>
            <param name="target">Target disposable object.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Disposable`1.DisposeManagedResources">
            <summary>
            Dispose weak reference.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.Envelope">
            <summary>
            The factory helper for creating envelopes.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.Envelope.Create``1(``0)">
            <summary>
            Creates new instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with body.
            </summary>
            <typeparam name="T">Type of the body.</typeparam>
            <param name="body">The body of the evelope.</param>
            <returns>New instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with <paramref name="body"/>.</returns>
        </member>
        <member name="T:Neptuo.ComponentModel.Envelope`1">
            <summary>
            The evelope for processing long running operations.
            Provides access to common metadata.
            </summary>
            <typeparam name="T">The type of envelope body.</typeparam>
        </member>
        <member name="M:Neptuo.ComponentModel.Envelope`1.#ctor(`0,System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Creates new instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with specified parameters.
            </summary>
            <param name="body">The body of the evelope.</param>
            <param name="delay">The delay for sending, enqueing or processing the body.</param>
            <param name="timeToLive">The time to live for the message in the queue.</param>
            <param name="sourceID">The source message/envelope ID.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Envelope`1.#ctor(`0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates new instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with specified parameters.
            </summary>
            <param name="body">The body of the evelope.</param>
            <param name="delay">The delay for sending, enqueing or processing the body.</param>
            <param name="timeToLive">The time to live for the message in the queue.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Envelope`1.#ctor(`0,System.String)">
            <summary>
            Creates new instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with body and source ID.
            </summary>
            <param name="body">The body of the evelope.</param>
            <param name="sourceID">The source message/envelope ID.</param>
        </member>
        <member name="M:Neptuo.ComponentModel.Envelope`1.#ctor(`0)">
            <summary>
            Creates new instance of <see cref="T:Neptuo.ComponentModel.Envelope`1"/> with body.
            </summary>
            <param name="body">The body of the evelope.</param>
        </member>
        <member name="P:Neptuo.ComponentModel.Envelope`1.Body">
            <summary>
            The body of the evelope.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Envelope`1.Delay">
            <summary>
            The delay for sending, enqueing or processing the body.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Envelope`1.TimeToLive">
            <summary>
            The time to live for the message in the queue.
            If not specified, value is <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.Envelope`1.SourceID">
            <summary>
            The source message/envelope ID.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.IErrorModel">
            <summary>
            Describes error.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.IErrorModel.Text">
            <summary>
            Text description of error.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.DefaultContentRangeInfo">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.TextOffsets.IContentRangeInfo"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.IContentRangeInfo">
            <summary>
            Describes text content info.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.IContentRangeInfo.StartIndex">
            <summary>
            Starting index.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.IContentRangeInfo.Length">
            <summary>
            Length of the content.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.DefaultLineInfo">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.TextOffsets.ILineInfo"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.ILineInfo">
            <summary>
            Describes position/offset in source global source content.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.ILineInfo.LineIndex">
            <summary>
            Line index.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.ILineInfo.ColumnIndex">
            <summary>
            Index at line.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.DefaultLineRangeInfo">
            <summary>
            Default implementation of <see cref="T:Neptuo.ComponentModel.TextOffsets.ILineRangeInfo"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.TextOffsets.ILineRangeInfo">
            <summary>
            Extends <see cref="T:Neptuo.ComponentModel.TextOffsets.ILineInfo"/> with property for end position.
            So this class models range sub part of source content.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.ILineRangeInfo.EndLineIndex">
            <summary>
            Line index of range end.
            </summary>
        </member>
        <member name="P:Neptuo.ComponentModel.TextOffsets.ILineRangeInfo.EndColumnIndex">
            <summary>
            Index at line of range end.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.OutFuncCollection`3">
            <summary>
            Represents collection of output functions.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="T:Neptuo.ComponentModel._ErrorModelExtensions">
            <summary>
            Common extensions of <see cref="T:Neptuo.ComponentModel.IErrorModel"/>.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel._ErrorModelExtensions.TryWithLineInfo(Neptuo.ComponentModel.IErrorModel,Neptuo.ComponentModel.TextOffsets.ILineInfo@)">
            <summary>
            Tries to <see cref="T:Neptuo.ComponentModel.TextOffsets.ILineInfo"/> from <paramref name="errorModel"/>.
            </summary>
            <param name="errorModel">Source error model.</param>
            <param name="lineInfo">Target output line info.</param>
            <returns><c>true</c> if <paramref name="errorModel"/> contains line info.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel._ErrorModelExtensions.TryWithLineRangeInfo(Neptuo.ComponentModel.IErrorModel,Neptuo.ComponentModel.TextOffsets.ILineRangeInfo@)">
            <summary>
            Tries to <see cref="T:Neptuo.ComponentModel.TextOffsets.ILineRangeInfo"/> from <paramref name="errorModel"/>.
            </summary>
            <param name="errorModel">Source error model.</param>
            <param name="lineInfo">Target output line info.</param>
            <returns><c>true</c> if <paramref name="errorModel"/> contains line info.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel._ErrorModelExtensions.TryWithContentInfo(Neptuo.ComponentModel.IErrorModel,Neptuo.ComponentModel.TextOffsets.IContentRangeInfo@)">
            <summary>
            Tries to <see cref="T:Neptuo.ComponentModel.TextOffsets.IContentRangeInfo"/> from <paramref name="errorModel"/>.
            </summary>
            <param name="errorModel">Source error model.</param>
            <param name="contentInfo">Target output content info.</param>
            <returns><c>true</c> if <paramref name="errorModel"/> contains content info.</returns>
        </member>
        <member name="M:Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute``2(Neptuo.ComponentModel.OutFuncCollection{``0,``1,System.Boolean},``0,``1@)">
            <summary>
            Tries to execute all funcs in <paramref name="list"/> until first returns <c>true</c>. 
            </summary>
            <typeparam name="T">Type of func parameter.</typeparam>
            <typeparam name="TOutput">Type of output parameter.</typeparam>
            <param name="list">List to execute on.</param>
            <param name="parameter">Value of func parameter.</param>
            <param name="output">Provided output value.</param>
            <returns><c>true</c> if any func in <paramref name="list"/> returns <c>true</c>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Neptuo.Converts">
            <summary>
            Util for converting between types.
            </summary>
        </member>
        <member name="M:Neptuo.Converts.Try``2(``0,``1@)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> of type <typeparamref name="TSource"/> to target type <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TSource">Source value type.</typeparam>
            <typeparam name="TTarget">Target value type.</typeparam>
            <param name="sourceValue">Source value.</param>
            <param name="targetValue">Output target value.</param>
            <returns>True if conversion was successfull.</returns>
        </member>
        <member name="M:Neptuo.Converts.Try(System.Type,System.Type,System.Object,System.Object@)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> to target type <paramref name="targetType"/>.
            </summary>
            <param name="sourceType">Type of source value.</param>
            <param name="targetType">Type of target value.</param>
            <param name="sourceValue">Source value.</param>
            <param name="targetValue">Output target value.</param>
            <returns>True if conversion was successfull.</returns>
        </member>
        <member name="M:Neptuo.Converts.To``2(``0)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> of type <typeparamref name="TSource"/> to target type <typeparamref name="TTarget"/>.
            If conversion is not possible, throws exception <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name="TSource">Source value type.</typeparam>
            <typeparam name="TTarget">Target value type.</typeparam>
            <param name="sourceValue">Source value.</param>
            <returns>Value <paramref name="sourceValue"/> converted to type <typeparamref name="TTarget"/></returns>
        </member>
        <member name="M:Neptuo.Converts.To(System.Type,System.Type,System.Object)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> to target type <paramref name="targetType"/>.
            If conversion is not possible, throws exception <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="sourceType">Type of source value.</param>
            <param name="targetType">Type of target value.</param>
            <param name="sourceValue">Source value.</param>
            <returns>Value <paramref name="sourceValue"/> converted to type <paramref name="targetType"/>.</returns>
        </member>
        <member name="M:Neptuo.Converts.To(System.Type,System.Object)">
            <summary>
            Tries to convert <paramref name="sourceValue"/> to target type <paramref name="targetType"/>.
            If conversion is not possible, throws exception <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="targetType">Type of target value.</param>
            <param name="sourceValue">Source value.</param>
            <returns>Value <paramref name="sourceValue"/> converted to type <paramref name="targetType"/>.</returns>
        </member>
        <member name="P:Neptuo.Converts.Repository">
            <summary>
            Repository containing all registered converters.
            </summary>
        </member>
        <member name="T:Neptuo.Activators.DefaultActivator`1">
            <summary>
            Implementation of <see cref="T:Neptuo.Activators.IActivator`1"/> for types with parameterless constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Neptuo.Activators.DependencyActivator`1" -->
        <member name="T:Neptuo.Exceptions.Helpers.EnsureConditionHelper">
            <summary>
            Helper class for defining extension condition method on <see cref="F:Neptuo.Ensure.Condition"/>.
            </summary>
        </member>
        <member name="T:Neptuo.FeatureModels.ObjectFeatureModel">
            <summary>
            Implementation of <see cref="T:Neptuo.FeatureModels.IFeatureModel"/> which tries type casting to retrive requested feature.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.ObjectFeatureModel.#ctor(System.Object)">
            <summary>
            Creates feature model for object <paramref name="instance"/>.
            </summary>
            <param name="instance">Object instance to retrieve feature from.</param>
        </member>
        <member name="T:Neptuo.FeatureModels._FeatureCollectionModelExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.FeatureModels.FeatureCollectionModel"/>.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels._FeatureCollectionModelExtensions.Add``1(Neptuo.FeatureModels.FeatureCollectionModel,``0)">
            <summary>
            Adds feature to the collection.
            </summary>
            <typeparam name="T">Tyoe if feature.</typeparam>
            <param name="feature">Feature instance.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.FeatureModels._FeatureModelExtensions.With``1(Neptuo.FeatureModels.IFeatureModel)">
            <summary>
            Tries to retrieve object of type <typeparamref name="TFeature"/>.
            If this is not possible, throws <see cref="T:System.NotSupportedException"/>/
            </summary>
            <typeparam name="TFeature">Type of feature to retrieve.</typeparam>
            <param name="model">Feature model.</param>
            <returns>Feature of type <typeparamref name="TFeature"/>.</returns>
            <exception cref="T:System.NotSupportedException">If <paramref name="model"/> doesn't support feature of type <typeparamref name="TFeature"/>.</exception>
        </member>
        <member name="T:Neptuo.Activators.InstanceActivator`1">
            <summary>
            Singleton activator with support for creating singleton from function (on first call).
            </summary>
            <typeparam name="T">Type of service to create.</typeparam>
        </member>
        <member name="M:Neptuo.Activators.InstanceActivator`1.#ctor(`0)">
            <summary>
            Create new instance from already created singleton object.
            </summary>
            <param name="instance">Singleton object.</param>
        </member>
        <member name="M:Neptuo.Activators.InstanceActivator`1.#ctor(System.Func{`0})">
            <summary>
            Creates new instance from <paramref name="innerGetter"/>.
            </summary>
            <param name="instanceGetter">Function to access singleton object.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.DependencyCommandDispatcher">
            <summary>
            Command dispatcher based on registration from <see cref="T:Neptuo.Activators.IDependencyProvider"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.ICommandDispatcher">
            <summary>
            Main entry point to commanding infrastructure.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.ICommandDispatcher.Handle(System.Object)">
            <summary>
            Posts <paramref name="command"/> to command infrastructure for execution.
            </summary>
            <param name="command">Instance describing requested operation.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.DependencyCommandDispatcher.#ctor(Neptuo.Activators.IDependencyProvider,Neptuo.Pipelines.Events.IEventDispatcher)">
            <summary>
            Initializes new instance with <paramref name="dependencyProvider"/>.
            </summary>
            <param name="dependencyProvider">Source for registrations.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.DependencyCommandDispatcher.Handle(System.Object)">
            <summary>
            Handles <paramref name="command"/>.
            </summary>
            <param name="command">Command to handle.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.DependencyCommandDispatcher.HandleException(System.Exception)">
            <summary>
            Handles exceptions occured while handling or validating command.
            </summary>
            <param name="exception">Exception that occured.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Events.CommandHandled">
            <summary>
            Event fired when command is handled by command handler.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Events.CommandHandled.#ctor(System.Object)">
            <summary>
            Initializes new instance with <paramref name="command"/>, but no command guid.
            </summary>
            <param name="command">Executed command.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Events.CommandHandled.Command">
            <summary>
            Executed command.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.IEventHandler`1">
            <summary>
            Handler for events of type <typeparamref name="TEvent"/>.
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.IEventHandler`1.HandleAsync(`0)">
            <summary>
            Handles event described by <paramref name="payload"/>.
            </summary>
            <param name="payload">Instance of event data.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor">
            <summary>
            <see cref="T:Neptuo.Pipelines.Commands.Execution.ICommandExecutor"/> using <see cref="T:Neptuo.Activators.IDependencyProvider"/>.
            Enables interception.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.ICommandExecutor">
            <summary>
            Executor for command.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ICommandExecutor.Handle(System.Object)">
            <summary>
            Executes command.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="E:Neptuo.Pipelines.Commands.Execution.ICommandExecutor.OnCommandHandled">
            <summary>
            Fired when handling of command was completed.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke">
            <summary>
            Enables interception of command execution.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke.OnInvoke(Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext)">
            <summary>
            Arround handler invoke.
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.handleMethodName">
            <summary>
            Name of <see cref="M:Neptuo.Pipelines.Commands.Handlers.ICommandHandler`1.Handle(`0)"/>.
            </summary>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.dependencyProvider">
            <summary>
            Current dependency provider.
            </summary>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.interceptorProvider">
            <summary>
            Current provider for interceptors.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.#ctor(Neptuo.Activators.IDependencyProvider,Neptuo.Pipelines.Commands.Interception.IInterceptorProvider)">
            <summary>
            Initializes new instance with <paramref name="dependencyProvider"/>.
            </summary>
            <param name="dependencyProvider">Source for registrations.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.Handle(System.Object)">
            <summary>
            Handles <paramref name="command"/>.
            </summary>
            <param name="command">Command to handle.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.OnInvoke(Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext)">
            <summary>
            When all interceptors are done, executes command.
            Requires <paramref name="context"/> to be of type <see cref="T:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware"/>.
            </summary>
            <param name="context">Context object, must be of type <see cref="T:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware"/>.</param>
        </member>
        <member name="E:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.OnCommandHandled">
            <summary>
            Fired when handling of command was completed.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory">
            <summary>
            Factory for <see cref="T:Neptuo.Pipelines.Commands.Execution.ICommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory.CreateExecutor(System.Object)">
            <summary>
            Creates executor for <paramref name="command"/>.
            </summary>
            <param name="command">Command.</param>
            <returns>Executor for <paramref name="command"/>.</returns>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.dependencyProvider">
            <summary>
            Current dependency provider.
            </summary>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.interceptorProvider">
            <summary>
            Current provider for interceptors.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.#ctor(Neptuo.Activators.IDependencyProvider)">
            <summary>
            Initializes new instance with <paramref name="dependencyProvider"/> and without interception.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.#ctor(Neptuo.Activators.IDependencyProvider,Neptuo.Pipelines.Commands.Interception.IInterceptorProvider)">
            <summary>
            Initializes new instance with <paramref name="dependencyProvider"/>.
            </summary>
            <param name="dependencyProvider">Source for registrations.</param>
            <param name="interceptorProvider">Interceptor provider.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.CreateExecutor(System.Object)">
            <summary>
            Creates <see cref="T:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor"/>.
            </summary>
            <param name="command">Command instance.</param>
            <returns>Instance of <see cref="T:Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor"/>.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory">
            <summary>
            Eanbles registering factories for command types.
            </summary>
        </member>
        <member name="F:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.OnSearchFactory">
            <summary>
            When factory for command type is not registered, this event gets fired with command instance.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.AddFactory(System.Type,Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory)">
            <summary>
            Adds factory for commands of type <paramref name="commandType"/>.
            </summary>
            <param name="commandType">Command type.</param>
            <param name="factory">Command executor factory for commands of type <paramref name="commandType"/>.</param>
            <returns>This (fluently).</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.CreateExecutor(System.Object)">
            <summary>
            Seaches for <see cref="T:Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory"/> in registered factories or using <see cref="F:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.OnSearchFactory"/>.
            </summary>
            <param name="command">Command instance.</param>
            <returns>Command executor.</returns>
            <exception cref="T:Neptuo.Pipelines.Commands.Execution.CommandExecutorException">When factory lookup failed.</exception>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory.Factories">
            <summary>
            Lost of registered factories for command types.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware">
            <summary>
            Describes object that has Command and associated CommandHandler.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware.CommandHandler">
            <summary>
            Command handler to handle <see cref="P:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware.Command"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware.Command">
            <summary>
            Command to handle.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext">
            <summary>
            Context in which are interceptors executed.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext">
            <summary>
            Describes interceptor execution pipeline.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext.Next">
            <summary>
            Process execution to next interceptor.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext.Command">
            <summary>
            Command to handle.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext.Exception">
            <summary>
            Exception, that occured during execution.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.#ctor(System.Collections.Generic.IEnumerable{Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke},System.Object,System.Object)">
            <summary>
            Creates new instance.
            </summary>
            <param name="interceptors">List of interceptors.</param>
            <param name="commandHandler">Command handler to execute.</param>
            <param name="command">Command to handle.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.Next">
            <summary>
            Moves to next interceptor.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.Interceptors">
            <summary>
            List of interceptors.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.InterceptorEnumerator">
            <summary>
            Enumerator for <see cref="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.Interceptors"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.CommandHandler">
            <summary>
            Command handler to execute.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.Command">
            <summary>
            Command to handle.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext.Exception">
            <summary>
            Exception, that occured during execution.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext">
            <summary>
            Context for <see cref="T:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.AddCommand(System.Object)">
            <summary>
            Adds command to queue.
            </summary>
            <param name="command">Command to enqueue.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.NextCommand">
            <summary>
            Gets next command to handle or throws <see cref="T:System.InvalidOperationException"/> if queue is empty.
            Before calling this, call <see cref="P:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.IsNextAvailable"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.CreateInnerExecutor(System.Object)">
            <summary>
            Creates and enqueues inner executor.
            </summary>
            <param name="command">Command to handle.</param>
            <returns>Inner executor.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.RemoveDoneExecutor(Neptuo.Pipelines.Commands.Execution.ICommandExecutor)">
            <summary>
            Removes executor from queue.
            </summary>
            <param name="executor">Finished executor.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.ExecuteLocked(System.Action)">
            <summary>
            Executes <paramref name="action"/> in locked mode (if locking is enabled).
            </summary>
            <param name="action">Action to run.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext.IsNextAvailable">
            <summary>
            Flag to see if execution of next command is possible.
            True if pool limit is not reached and there is waiting command.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor">
            <summary>
            Executes commands in context of pool.
            When size of pool is reached, execution of next commands wait until previous command are done.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.HandleCommandIfPossible">
            <summary>
            Handles next command if pool size is not reached and command queue is not empty.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.DoHandleCommand(Neptuo.Pipelines.Commands.Execution.ICommandExecutor,System.Object)">
            <summary>
            Just calls handle on executor.
            </summary>
            <param name="executor">Executor to run.</param>
            <param name="command">Command to process.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.OnExecutorCommandHandled(Neptuo.Pipelines.Commands.Execution.ICommandExecutor,System.Object)">
            <summary>
            Raised when inner executor finishes his job on command.
            </summary>
            <param name="executor">Inner executor.</param>
            <param name="command">Handled command.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.PoolContext">
            <summary>
            Current pool context.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory">
            <summary>
            Executed commands in pool (with max of concurrently executed commands).
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.#ctor(Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory,System.Boolean)">
            <summary>
            Creates pool excutor factory with unlimited pool size.
            </summary>
            <param name="innerFactory">Factory for creating executors inside pool.</param>
            <param name="isUseLocking">Whether runs in multithreaded context.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.#ctor(System.Int32,Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory,System.Boolean)">
            <summary>
            Creates pool excutor factory with pool size of <paramref name="poolSize"/>.
            </summary>
            <param name="poolSize">Pool size (max of concurrently executed commands).</param>
            <param name="innerFactory">Factory for creating executors inside pool.</param>
            <param name="isUseLocking">Whether runs in multithreaded context.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.CreateExecutor(System.Object)">
            <summary>
            Creates pool executor. Calls <see cref="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.CreatePoolExecutor(System.Object)"/>.
            </summary>
            <param name="command">Command to handle.</param>
            <returns>Poo executor.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.CreatePoolExecutor(System.Object)">
            <summary>
            Creates <see cref="T:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor"/>. Virtual for overriding in derivered classes.
            </summary>
            <param name="command">Command to handle.</param>
            <returns>Pool executor.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.AddCommand(System.Object)">
            <summary>
            Adds command to queue.
            </summary>
            <param name="command">Command to enqueue.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.NextCommand">
            <summary>
            Gets next command to handle or throws <see cref="T:System.InvalidOperationException"/> if queue is empty.
            Before calling this, call <see cref="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.IsNextAvailable"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.CreateInnerExecutor(System.Object)">
            <summary>
            Creates and enqueues inner executor.
            </summary>
            <param name="command">Command to handle.</param>
            <returns>Inner executor.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.RemoveDoneExecutor(Neptuo.Pipelines.Commands.Execution.ICommandExecutor)">
            <summary>
            Removes executor from queue.
            </summary>
            <param name="executor">Finished executor.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.ExecuteLocked(System.Action)">
            <summary>
            Executes <paramref name="action"/> in locked mode (if locking is enabled).
            </summary>
            <param name="action">Action to run.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.CommandQueue">
            <summary>
            List waiting commands.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.PoolSize">
            <summary>
            Max pool size. If null, pool is unlimited.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.InnerFactory">
            <summary>
            Factory for inner executors.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.InnerExecutors">
            <summary>
            List of pooled inner executors.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.IsUseLocking">
            <summary>
            Flag to see if execution of commands is locked.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.HasNextCommand">
            <summary>
            Flag to see if there is waiting command (CommandQueue is not empty).
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.IsNextAvailable">
            <summary>
            Flag to see if execution of next command is possible.
            True if pool limit is not reached and there is waiting command.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor">
            <summary>
            Handles commands in new thread.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor.DoHandleCommand(Neptuo.Pipelines.Commands.Execution.ICommandExecutor,System.Object)">
            <summary>
            Handles command in new thread.
            </summary>
            <param name="executor">Inner executor.</param>
            <param name="command">Command to handle.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory">
            <summary>
            Executes commands pool of threads.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory.#ctor(Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory)">
            <summary>
            Creates thread pool excutor factory with unlimited pool size.
            </summary>
            <param name="innerFactory">Factory for creating executors inside pool.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory.#ctor(System.Int32,Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory)">
            <summary>
            Creates thread pool excutor factory with pool size of <paramref name="poolSize"/>.
            </summary>
            <param name="poolSize">Pool size (max of concurrently executed commands).</param>
            <param name="innerFactory">Factory for creating executors inside pool.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory.CreatePoolExecutor(System.Object)">
            <summary>
            Creates <see cref="T:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor"/>.
            </summary>
            <param name="command">Command to handle.</param>
            <returns><see cref="T:Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor"/>.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Handlers.ICommandHandler`1">
            <summary>
            Command handler contract.
            </summary>
            <typeparam name="TCommand">Type of command to handle.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Handlers.ICommandHandler`1.Handle(`0)">
            <summary>
            Handles <paramref name="command"/>.
            </summary>
            <param name="command">Command to handle.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.ICommand">
            <summary>
            Optional base.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.ICommand.Guid">
            <summary>
            Unique command identifier.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.AttributeInterceptorProvider">
            <summary>
            Reads interceptors from attributes used on target command handler.
            Attributes are read from class type and method definition.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.IInterceptorProvider">
            <summary>
            Provides access to interceptors defined for some command handler.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.IInterceptorProvider.GetInterceptors(System.Object,System.Object,System.Reflection.MethodInfo)">
            <summary>
            Returns list of interceptors registered from <paramref name="commandHandler"/>.
            </summary>
            <param name="commandHandler">Command handler.</param>
            <param name="command">Command that will be handled.</param>
            <param name="commandHandlerMethod">Method, that handles command on <paramref name="commandHandler"/>.</param>
            <returns>List of interceptors.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.DiscardExceptionAttribute">
            <summary>
            Interceptor that discards selected exceptions.
            Execution will behave like these exceptions never occur.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.DiscardExceptionAttribute.#ctor(System.Type[])">
            <summary>
            Creates new instance with selected exception types to discard.
            </summary>
            <param name="execeptions"></param>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Interception.DiscardExceptionAttribute.Exceptions">
            <summary>
            List of seleted exception types.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider">
            <summary>
            Enables static manual interception registration.
            For now, supports only interceptors for handler types, not handler methods.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider.AddInterceptorType(System.Type,System.Type)">
            <summary>
            Registers interceptor <paramref name="interceptorType"/> for <paramref name="commandHandlerType"/>.
            </summary>
            <param name="commandHandlerType">Command handler type.</param>
            <param name="interceptorType">Interceptor type.</param>
            <rereturns>This (fluently).</rereturns>
        </member>
        <member name="M:Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider.AddInterceptorFactory(System.Type,System.Func{Neptuo.Activators.IDependencyProvider,Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke})">
            <summary>
            Registers interceptor factory <paramref name="factory"/> for <paramref name="commandHandlerType"/>.
            </summary>
            <param name="commandHandlerType">Command handler type.</param>
            <param name="factory">Interceptor factory.</param>
            <rereturns>This (fluently).</rereturns>
        </member>
        <member name="P:Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider.Storage">
            <summary>
            Key is command handler type, value if list of interceptor factories.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.DefaultDeleteDispatcher">
            <summary>
            Default implementation of <see cref="T:Neptuo.Pipelines.Deleters.IDeleteDispatcher"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.IDeleteDispatcher">
            <summary>
            Provides ability to delete object.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.IDeleteDispatcher.PrepareContext(Neptuo.DomainModels.IKey)">
            <summary>
            Prepares context for deleting object identifier by <paramref name="key"/>.
            </summary>
            <param name="key">Key of the object to delete.</param>
            <returns>Deletion context.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.DefaultDeleteDispatcher.Add(System.String,Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler)">
            <summary>
            Registers <paramref name="handler"/> to be executed for keys with type <paramref name="objectType"/>.
            </summary>
            <param name="objectType">Type of object to be handled by <paramref name="handler"/>.</param>
            <param name="handler">Handler to be executed for keys with type <paramref name="objectType"/>.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.DefaultDeleteDispatcher.AddSearchHandler(Neptuo.OutFunc{System.String,Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler,System.Boolean})">
            <summary>
            Registers search handler when non handler was found for key.
            </summary>
            <param name="searchHandler">Search handler.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.Handlers.IDeleteExecutionHandler">
            <summary>
            Executes deletion.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.Handlers.IDeleteExecutionHandler.Handle(Neptuo.DomainModels.IKey)">
            <summary>
            Executes delete operation.
            This method should be called <see cref="T:Neptuo.Pipelines.Deleters.IDeleteContext"/> has set <see cref="P:Neptuo.Pipelines.Deleters.IDeleteContext.CanDelete"/> to <c>true</c>.
            </summary>
            <param name="key">Key of the object to delete.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler">
            <summary>
            Prepares <see cref="T:Neptuo.Pipelines.Deleters.IDeleteContext"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler.Handle(Neptuo.DomainModels.IKey)">
            <summary>
            Prepares <see cref="T:Neptuo.Pipelines.Deleters.IDeleteContext"/> for <paramref name="key"/>.
            </summary>
            <param name="key">Key of the object to delete.</param>
            <returns>Deletion context.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.IDeleteContext">
            <summary>
            Describes context of delete request.
            Takes referenced objects and whether object can be deleted.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Deleters.IDeleteContext.Delete">
            <summary>
            Executes delete (if can be deleted).
            </summary>
            <exception cref="T:System.InvalidOperationException">In case when <see cref="P:Neptuo.Pipelines.Deleters.IDeleteContext.CanDelete"/> is <c>false</c>.</exception>
        </member>
        <member name="P:Neptuo.Pipelines.Deleters.IDeleteContext.SourceKey">
            <summary>
            Requested key to delete.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Deleters.IDeleteContext.CanDelete">
            <summary>
            If object identified by <see cref="P:Neptuo.Pipelines.Deleters.IDeleteContext.SourceKey"/> can be deleted.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Deleters.IDeleteContext.References">
            <summary>
            Collection of referenced objects.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.IDeleteReference">
            <summary>
            Describes reference to other object.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Deleters.IDeleteReference.Key">
            <summary>
            Key of the referenced object.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Deleters.IDeleteReference.IsMandatory">
            <summary>
            Whether reference is mandatory (to target object must be deleted too).
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Deleters.MissingHandlerContext">
            <summary>
            Implementation of <see cref="T:Neptuo.Pipelines.Deleters.IDeleteContext"/> for missing delete handler.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.ActivatorEventHandler`2">
            <summary>
            Wrapper for <typeparamref name="TEventHandler"/> with resolve using <see cref="T:Neptuo.Activators.IDependencyProvider"/> for each event handling.
            </summary>
            <typeparam name="TEventHandler">Type of inner handler to resolve and use.</typeparam>
            <typeparam name="TEvent">Type of event data.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.ActivatorEventHandler`2.#ctor(Neptuo.Activators.IActivator{`0})">
            <summary>
            Creates new instance and uses <paramref name="innerHandlerFactory"/> 
            to resolve inner handler of type <typeparamref name="TEventHandler"/>.
            </summary>
            <param name="innerHandlerFactory">Instance provider for inner handler of type <typeparamref name="TEventHandler"/>.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext`1">
            <summary>
            Default implmentation of <see cref="T:Neptuo.Pipelines.Events.Handlers.IEventHandlerContext`1"/>.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.IEventHandlerContext`1">
            <summary>
            Describes whole event processing context.
            </summary>
            <typeparam name="TEvent">Type of event to handle.</typeparam>
        </member>
        <member name="P:Neptuo.Pipelines.Events.Handlers.IEventHandlerContext`1.Payload">
            <summary>
            Event data wrapped in envelope.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Events.Handlers.IEventHandlerContext`1.Registry">
            <summary>
            Current registry of event subscriptions.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Events.Handlers.IEventHandlerContext`1.Dispatcher">
            <summary>
            Current event dispatcher.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext`1.#ctor(`0,Neptuo.Pipelines.Events.IEventRegistry,Neptuo.Pipelines.Events.IEventDispatcher)">
            <summary>
            Creates context from event data and wraps it into <see cref="T:Neptuo.ComponentModel.Envelope`1"/>.
            </summary>
            <param name="payload">Event data.</param>
            <param name="registry">Current registry of event subscriptions.</param>
            <param name="dispatcher">Current event dispatcher.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext`1.#ctor(Neptuo.ComponentModel.Envelope{`0},Neptuo.Pipelines.Events.IEventRegistry,Neptuo.Pipelines.Events.IEventDispatcher)">
            <summary>
            Creates context from event data envelope.
            </summary>
            <param name="payload">Event data wrapped in envelope.</param>
            <param name="registry">Current registry of event subscriptions.</param>
            <param name="dispatcher">Current event dispatcher.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.WeakEventHandler`1">
            <summary>
            Wrapper for <see cref="T:Neptuo.Pipelines.Events.Handlers.IEventHandler`1"/> to
            support inner handler garbage collection with support to auto-unsubscribe.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.WeakEventHandler`1.#ctor(Neptuo.Pipelines.Events.Handlers.IEventHandler{`0})">
            <summary>
            Creates new instance to wrap <paramref name="innerHandler"/>.
            </summary>
            <param name="innerHandler">Event handler to handle events of type <typeparamref name="TEvent"/>.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Events.IEventRegistry">
            <summary>
            Provides methods for registering and unregistering event handlers.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Events.IEventRegistry.Subscribe``1(Neptuo.Pipelines.Events.Handlers.IEventHandler{``0})">
            <summary>
            Subscribes <paramref name="handler"/> for events of type <typeparamref name="TEvent"/>.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
            <param name="handler">Event handler.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Events.IEventRegistry.UnSubscribe``1(Neptuo.Pipelines.Events.Handlers.IEventHandler{``0})">
            <summary>
            Unsubscribes <paramref name="handler"/> from events of type <typeparamref name="TEvent"/>.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
            <param name="handler">Event handler.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Queries.DependencyQueryDispatcher">
            <summary>
            Implementation of <see cref="T:Neptuo.Pipelines.Queries.IQueryDispatcher"/> which uses <see cref="T:Neptuo.Activators.IDependencyProvider"/> to read registrations from.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Queries.IQueryDispatcher">
            <summary>
            Dispatcher for queries.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Queries.IQueryDispatcher.QueryAsync``1(Neptuo.Pipelines.Queries.IQuery{``0})">
            <summary>
            Dispatches 
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.Pipelines.Queries.DependencyQueryDispatcher.#ctor(Neptuo.Activators.IDependencyProvider)">
            <summary>
            Creates new instance with <paramref name="dependencyProvider"/>.
            </summary>
            <param name="dependencyProvider">Source for registrations.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Replying.DependencyRequestDispatcher">
            <summary>
            Implementation of <see cref="T:Neptuo.Pipelines.Replying.IRequestDispatcher"/> which uses <see cref="T:Neptuo.Activators.IDependencyProvider"/> to read registrations from.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Replying.IRequestDispatcher">
            <summary>
            Request-reply pipeline.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Replying.IRequestDispatcher.ExecuteAsync``2(``0)">
            <summary>
            Executes <paramref name="request"/> and returns its response.
            </summary>
            <typeparam name="TInput">Type of request.</typeparam>
            <typeparam name="TOutput">Type of response.</typeparam>
            <param name="request">Request data.</param>
            <returns>Response to <paramref name="request"/>.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Replying.DependencyRequestDispatcher.#ctor(Neptuo.Activators.IDependencyProvider)">
            <summary>
            Creates new instance with <paramref name="dependencyProvider"/>.
            </summary>
            <param name="dependencyProvider">Source for registrations.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Replying.IRequest`1">
            <summary>
            Defines response of request object.
            </summary>
            <typeparam name="TOutput">Type of response.</typeparam>
        </member>
        <member name="T:Neptuo.Pipelines.Replying.Handlers.IRequestHandler`2">
            <summary>
            Request-reply handler.
            </summary>
            <typeparam name="TInput">Type of request.</typeparam>
            <typeparam name="TOutput">Type of response.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Replying.Handlers.IRequestHandler`2.HandleAsync(`0)">
            <summary>
            Should process <paramref name="request" /> and return response of type <typeparamref name="TOutput"/>.
            </summary>
            <param name="request">Request parameters.</param>
            <returns>Response to <paramref name="request"/>.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Queries.Handlers.IQueryHandler`2">
            <summary>
            Handler for query of type <typeparamref name="TQuery"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Queries.Handlers.IQueryHandler`2.HandleAsync(`0)">
            <summary>
            Should process <paramref name="query"/> and provide result of type <typeparamref name="TResult"/>.
            </summary>
            <param name="query">Query parameters.</param>
            <returns>Result to <paramref name="query"/>.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Replying._RequestDispatcherExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.Pipelines.Replying.IRequestDispatcher"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Replying._RequestDispatcherExtensions.Execute``2(Neptuo.Pipelines.Replying.IRequestDispatcher,``0)">
            <summary>
            Executes <paramref name="request"/> and returns its response.
            </summary>
            <typeparam name="TInput">Type of request.</typeparam>
            <typeparam name="TOutput">Type of response.</typeparam>
            <param name="request">Request data.</param>
            <returns>Response to <paramref name="request"/>.</returns>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute">
            <summary>
            Behavior attribute for action reprocessing.
            </summary>
        </member>
        <member name="F:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.DefaultReprocessCount">
            <summary>
            Default value of max reprocess count.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.#ctor">
            <summary>
            Creates new intance with reprocess count <see cref="F:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.DefaultReprocessCount"/> and 
            0ms as delay before reprocess.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.#ctor(System.Int32)">
            <summary>
            Creates new instance with 0ms as delay before reprocess.
            </summary>
            <param name="count">Reprocess max count.</param>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.#ctor(System.Int32,System.Double)">
            <summary>
            Creates new instance.
            </summary>
            <param name="count">Reprocess max count.</param>
            <param name="delayBeforeReprocess">Time (milliseconds) to wait before starting reprocess.</param>
        </member>
        <member name="P:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.Count">
            <summary>
            Reprocess max count.
            </summary>
        </member>
        <member name="P:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute.DelayBeforeReprocess">
            <summary>
            Time to wait before starting reprocess.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.Behaviors.Hosting.Compilation.CodeDomReprocessBehaviorInstanceGenerator">
            <summary>
            Code generator for <see cref="T:Neptuo.AppServices.Handlers.Behaviors.ReprocessAttribute"/> and <see cref="T:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior"/>.
            </summary>
        </member>
        <member name="T:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior">
            <summary>
            Behavior which restart processing after exception.
            </summary>
        </member>
        <member name="F:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior.DefaultReprocessCount">
            <summary>
            Default value of max reprocess count.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior.#ctor">
            <summary>
            Creates new intance with reprocess count <see cref="F:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior.DefaultReprocessCount"/> and 
            0ms as delay before reprocess.
            </summary>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior.#ctor(System.Int32)">
            <summary>
            Creates new instance with 0ms as delay before reprocess.
            </summary>
            <param name="count">Reprocess max count.</param>
        </member>
        <member name="M:Neptuo.AppServices.Handlers.Behaviors.Hosting.ReprocessBehavior.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates new instance.
            </summary>
            <param name="count">Reprocess max count.</param>
            <param name="deplayBeforeReprocess">Time to wait before starting reprocess.</param>
        </member>
        <member name="T:Neptuo.Diagnostics.DebugBase">
            <summary>
            Provides access for method execution in stopwatch.
            </summary>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.#ctor(Neptuo.Diagnostics.DebugBase.DebugMessageWriter)">
            <summary>
            Creates instance and uses <paramref name="innerWriter"/> as writer for measurements.
            </summary>
            <param name="innerWriter">Writer for measurements.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.#ctor(System.IO.TextWriter)">
            <summary>
            Creates instance and uses <paramref name="innerWriter"/> as writer for measurements.
            </summary>
            <param name="innerWriter">Writer for measurements.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.Debug(System.String,System.Action)">
            <summary>
            Executes <paramref name="action"/> in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <param name="title">Measurement title.</param>
            <param name="action">Action to execute in stopwatch.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.DebugIteration(System.String,System.Int32,System.Action)">
            <summary>
            Executes <paramref name="action"/> <paramref name="count"/>-times in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <param name="title">Measurement title.</param>
            <param name="count">Number of exections to run.</param>
            <param name="action">Action to execute in stopwatch.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.Debug``1(System.String,System.Func{``0})">
            <summary>
            Executes <paramref name="action"/> in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <typeparam name="T">Type returned from <paramref name="action"/>.</typeparam>
            <param name="title">Measurement title.</param>
            <param name="action">Action to execute in stopwatch.</param>
            <rereturns>Returns result from <paramref name="action"/>.</rereturns>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugBase.DebugIteration``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Executes <paramref name="action"/> <paramref name="count"/>-times in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <typeparam name="T">Type returned from <paramref name="action"/>.</typeparam>
            <param name="title">Measurement title.</param>
            <param name="count">Number of exections to run.</param>
            <param name="action">Action to execute in stopwatch.</param>
            <rereturns>Returns result from <paramref name="action"/>.</rereturns>
        </member>
        <member name="P:Neptuo.Diagnostics.DebugBase.InnerWriter">
            <summary>
            Writer for measurements.
            </summary>
        </member>
        <member name="T:Neptuo.Diagnostics.DebugBase.DebugMessageWriter">
            <summary>
            Debug message writer. 
            Should use <paramref name="format"/> as formatter for <paramref name="parameters"/>.
            </summary>
            <param name="format">The message.</param>
            <param name="parameters">Optional arguments/parameters for <paramref name="format"/>.</param>
        </member>
        <member name="T:Neptuo.Diagnostics.DebugHelper">
            <summary>
            Provides access for method execution in stopwatch.
            Output is always written to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugHelper.Debug(System.String,System.Action)">
            <summary>
            Executes <paramref name="action"/> in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <param name="title">Measurement title.</param>
            <param name="action">Action to execute in stopwatch.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugHelper.DebugIteration(System.String,System.Int32,System.Action)">
            <summary>
            Executes <paramref name="action"/> <paramref name="count"/>-times in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <param name="title">Measurement title.</param>
            <param name="count">Number of exections to run.</param>
            <param name="action">Action to execute in stopwatch.</param>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugHelper.Debug``1(System.String,System.Func{``0})">
            <summary>
            Executes <paramref name="action"/> in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <typeparam name="T">Type returned from <paramref name="action"/>.</typeparam>
            <param name="title">Measurement title.</param>
            <param name="action">Action to execute in stopwatch.</param>
            <rereturns>Returns result from <paramref name="action"/>.</rereturns>
        </member>
        <member name="M:Neptuo.Diagnostics.DebugHelper.DebugIteration``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Executes <paramref name="action"/> <paramref name="count"/>-times in stopwatch and saves message titled as <paramref name="title"/>.
            </summary>
            <typeparam name="T">Type returned from <paramref name="action"/>.</typeparam>
            <param name="title">Measurement title.</param>
            <param name="count">Number of exections to run.</param>
            <param name="action">Action to execute in stopwatch.</param>
            <rereturns>Returns result from <paramref name="action"/>.</rereturns>
        </member>
        <member name="T:Neptuo.DomainModels.IDomainModel`1">
            <summary>
            Describes domain model.
            </summary>
            <typeparam name="TKey">The type of the domain model key.</typeparam>
        </member>
        <member name="P:Neptuo.DomainModels.IDomainModel`1.Key">
            <summary>
            The key of the model.
            Shouldn't be null.
            </summary>
        </member>
        <member name="T:Neptuo.DomainModels.KeyBase">
            <summary>
            Base implementation of <see cref="T:Neptuo.DomainModels.IKey"/>.
            Solves equality, hash codes, comparing to other keys, atc.
            </summary>
        </member>
        <member name="T:Neptuo.DomainModels.IKey">
            <summary>
            Describes key of the domain model.
            </summary>
        </member>
        <member name="P:Neptuo.DomainModels.IKey.Type">
            <summary>
            Identifier of the domain model type.
            </summary>
        </member>
        <member name="P:Neptuo.DomainModels.IKey.IsEmpty">
            <summary>
            Whether this key is empty.
            </summary>
        </member>
        <member name="F:Neptuo.DomainModels.KeyBase.hashPrimeNumber">
            <summary>
            Constant for hash code computing of the type.
            </summary>
        </member>
        <member name="F:Neptuo.DomainModels.KeyBase.hashPrimeNumberField">
            <summary>
            Constant for hash code computing of the hash code value provided by derivered class.
            </summary>
        </member>
        <member name="M:Neptuo.DomainModels.KeyBase.#ctor(System.String,System.Boolean)">
            <summary>
            Creates key instance with flag whether is empty or not..
            </summary>
            <param name="type">Identifier of the domain model type.</param>
            <param name="isEmpty">Whether this key is empty.</param>
        </member>
        <member name="M:Neptuo.DomainModels.KeyBase.Equals(Neptuo.DomainModels.KeyBase)">
            <summary>
            Should compare this key value to value of <paramref name="other"/> and returns its values are equal.
            </summary>
            <param name="other">The other key to compare its value.</param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.DomainModels.KeyBase.CompareValueTo(Neptuo.DomainModels.KeyBase)">
            <summary>
            Should compare value of the <paramref name="other"/>.
            </summary>
            <param name="other">The other key to compare its value to.</param>
            <rereturns><see cref="M:System.IComparable.CompareTo(System.Object)"/>.</rereturns>
        </member>
        <member name="M:Neptuo.DomainModels.KeyBase.GetValueHashCode">
            <summary>
            Should returns hash code for this key value.
            </summary>
            <returns>Hash code for this key value.</returns>
        </member>
        <member name="T:Neptuo.DomainModels.IValidatableModel">
            <summary>
            Decribes model that contains information if the model is in valid state.
            This information is mostly set from <see cref="T:Neptuo.Pipelines.Validators.IValidationDispatcher"/>.
            </summary>
        </member>
        <member name="P:Neptuo.DomainModels.IValidatableModel.IsValid">
            <summary>
            Whether the model is in valid state; <c>null</c> = not validated, <c>true</c> = is valid, <c>false</c> = is not valid.
            </summary>
        </member>
        <member name="T:Neptuo.DomainModels.IReadOnlyRepository`2">
            <summary>
            Describes contract for getting domain models by its key.
            </summary>
        </member>
        <member name="M:Neptuo.DomainModels.IReadOnlyRepository`2.Find(`1)">
            <summary>
            Tries to find model with the key <paramref name="key"/>.
            </summary>
            <param name="key">The key of the model to find.</param>
            <returns>The instance of the model with the key; <c>null</c> if such model doesn't exist.</returns>
        </member>
        <member name="T:Neptuo.DomainModels.IRepository`2">
            <summary>
            Describes contract for getting and storing domain models by its key.
            </summary>
            <typeparam name="TDomainModel">The type of the domain model.</typeparam>
            <typeparam name="TKey">The type of the domain model key.</typeparam>
        </member>
        <member name="M:Neptuo.DomainModels.IRepository`2.Save(`0)">
            <summary>
            Saves changes to the <paramref name="model"/> to the underlaying storage.
            </summary>
            <param name="model">The instance of the model to save.</param>
        </member>
        <member name="T:Neptuo.Engine">
            <summary>
            Container for holding singleton data.
            </summary>
        </member>
        <member name="F:Neptuo.Engine.environmentLock">
            <summary>
            Lock object for creating environment.
            </summary>
        </member>
        <member name="P:Neptuo.Engine.RootContainer">
            <summary>
            Holds root dependency container for application.
            </summary>
        </member>
        <member name="P:Neptuo.Engine.Environment">
            <summary>
            Holds enviroment services.
            </summary>
        </member>
        <member name="T:Neptuo.EngineEnvironment">
            <summary>
            Environment container.
            </summary>
        </member>
        <member name="F:Neptuo.EngineEnvironment.storage">
            <summary>
            Internal storage.
            </summary>
        </member>
        <member name="F:Neptuo.EngineEnvironment.onSearchService">
            <summary>
            Invoked when service was not found.
            Takes typeof requested service, should return <c>true</c> to indicate success; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:Neptuo.EngineEnvironment.Use``1(``0,System.String)">
            <summary>
            Registers <paramref name="service"/> (with optional <paramref name="name"/>) into environment.
            </summary>
            <typeparam name="T">Type of service.</typeparam>
            <param name="service">Service to register.</param>
            <param name="name">Optional service name (for registering more services of the same type.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.EngineEnvironment.With``1(System.String)">
            <summary>
            Retrieve service of type <typeparamref name="T"/> (with optional <paramref name="name"/>) or throws exception.
            </summary>
            <typeparam name="T">Type of service.</typeparam>
            <param name="name">Optional service name (for registering more services of the same type.</param>
            <returns>Retrieved service.</returns>
        </member>
        <member name="M:Neptuo.EngineEnvironment.Has``1(System.String)">
            <summary>
            Returns <c>true</c> if there is registered service of type <typeparamref name="T"/> with optional name <paramref name="name"/>.
            </summary>
            <typeparam name="T">Type of service.</typeparam>
            <param name="name">Optional service name (for registering more services of the same type.</param>
            <returns><c>true</c> if such a service is registered; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.EngineEnvironment.TryWith``1(System.String,``0@)">
            <summary>
            Tries to retrieve service of type <typeparamref name="T"/> (with optional <paramref name="name"/>).
            </summary>
            <typeparam name="T">Type of service.</typeparam>
            <param name="name">Optional service name (for registering more services of the same type.</param>
            <param name="service">Retrieved service or <c>null</c>.</param>
            <returns><c>true</c> if service of type <typeparamref name="T"/> can be provided; <c>false</c> otherwise..</returns>
        </member>
        <member name="M:Neptuo.EngineEnvironment.AddSearchHandler(Neptuo.OutFunc{System.Type,System.Object,System.Boolean})">
            <summary>
            Adds handler for searching service for.
            </summary>
            <param name="handler">Search handler to add.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo._EnsureArgumentExtensions">
            <summary>
            Extensions for argument exceptions.
            </summary>
        </member>
        <member name="M:Neptuo._EnsureArgumentExtensions.Argument(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.ArgumentException"/> for argument <paramref name="argumentName"/> 
            and message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard"></param>
            <param name="argumentName"></param>
            <param name="format"></param>
            <param name="formatParameters"></param>
            <returns><see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureArgumentExtensions.ArgumentNull(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.ArgumentNullException"/> with argument <paramref name="argumentName"/> 
            and message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard">Exception helper.</param>
            <param name="argumentName">Argument name.</param>
            <param name="format">Message or format string.</param>
            <param name="formatParameters">Optional format string parameters.</param>
            <returns><see cref="T:System.ArgumentNullException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.ArgumentOutOfRangeException"/> with argument <paramref name="argumentName"/> 
            and message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard">Exception helper.</param>
            <param name="argumentName">Argument name.</param>
            <param name="format">Message or format string.</param>
            <param name="formatParameters">Optional format string parameters.</param>
            <returns><see cref="T:System.ArgumentOutOfRangeException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureArgumentExtensions.ArgumentFileNotExist(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.String)">
            <summary>
            Creates exception <see cref="T:System.ArgumentOutOfRangeException"/> with message saying, that file on <paramref name="path"/> doesn't exist.
            </summary>
            <param name="guard">Exception helper.</param>
            <param name="path">Path to the not existing file.</param>
            <param name="argumentName">Argument name.</param>
            <returns><see cref="T:System.ArgumentOutOfRangeException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureArgumentExtensions.ArgumentDirectoryNotExist(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.String)">
            <summary>
            Creates exception <see cref="T:System.ArgumentOutOfRangeException"/> with message saying, that directory on <paramref name="path"/> doesn't exist.
            </summary>
            <param name="guard">Exception helper.</param>
            <param name="path">Path to the not existing directory.</param>
            <param name="argumentName">Argument name.</param>
            <returns><see cref="T:System.ArgumentOutOfRangeException"/>.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Events.DefaultEventManager">
            <summary>
            Default implementation of <see cref="T:Neptuo.Pipelines.Events.IEventDispatcher"/> and <see cref="T:Neptuo.Pipelines.Events.IEventRegistry"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Events.IEventDispatcher">
            <summary>
            Provides ability to publish events.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Events.IEventDispatcher.PublishAsync``1(``0)">
            <summary>
            Publishes <paramref name="payload"/> to event bus.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
            <param name="payload">Instance of event data.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Events.DefaultEventManager.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Events._EventRegistryExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.Pipelines.Events.IEventRegistry"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Events._EventRegistryExtensions.Using``1(Neptuo.Pipelines.Events.IEventRegistry,Neptuo.Pipelines.Events.Handlers.IEventHandler{``0})">
            <summary>
            Registers <paramref name="eventHandler"/> to by notified for events of type <typeparamref name="TEvent"/>
            in the time of life of returned disposable object.
            </summary>
            <typeparam name="TEvent">Type of event data.</typeparam>
            <param name="eventRegistry">Target event registry.</param>
            <param name="eventHandler">Event handler.</param>
            <returns>Subscription lifetime manager.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Events.Handlers.DelegateEventHandler">
            <summary>
            Factory class for event handlers from actions and functions.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.DelegateEventHandler.FromAction``1(System.Action{``0})">
            <summary>
            Creates new instance using <paramref name="action"/>.
            </summary>
            <param name="action">Degate for handling events.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Events.Handlers.DelegateEventHandler.FromFunc``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Creates new instance using <paramref name="func"/>.
            </summary>
            <param name="func">Delegate for handling (possibly asynchronously) events.</param>
        </member>
        <member name="T:Neptuo.Exceptions.Helpers.EnsureExceptionHelper">
            <summary>
            Helper class for defining extension exception method on <see cref="F:Neptuo.Ensure.Exception"/>.
            </summary>
        </member>
        <member name="T:Neptuo._EnsureSystemExtensions">
            <summary>
            Extensions for system exceptions.
            </summary>
        </member>
        <member name="M:Neptuo._EnsureSystemExtensions.NotImplemented(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.NotImplementedException"/> for argument <paramref name="argumentName"/> 
            and optional message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard"></param>
            <param name="argumentName"></param>
            <param name="format"></param>
            <param name="formatParameters"></param>
            <returns><see cref="T:System.NotImplementedException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureSystemExtensions.NotSupported(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.NotSupportedException"/> for argument <paramref name="argumentName"/> 
            and optional message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard"></param>
            <param name="argumentName"></param>
            <param name="format"></param>
            <param name="formatParameters"></param>
            <returns><see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:System.InvalidOperationException"/> for argument <paramref name="argumentName"/> 
            and message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard"></param>
            <param name="argumentName"></param>
            <param name="format"></param>
            <param name="formatParameters"></param>
            <returns><see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="T:Neptuo.FileSystems._FileContentExtensions">
            <summary>
            Extensions for reading and writing file content in sync mode.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.GetContent(Neptuo.FileSystems.IReadOnlyFile)">
            <summary>
            Returns file content.
            </summary>
            <returns>File content.</returns>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.GetContentAsByteArray(Neptuo.FileSystems.IReadOnlyFile)">
            <summary>
            Returns file content as byte array.
            </summary>
            <returns>File content as byte array.</returns>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.GetContentAsStream(Neptuo.FileSystems.IReadOnlyFile)">
            <summary>
            Returns file content as stream.
            </summary>
            <returns>File content as stream.</returns>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.SetContent(Neptuo.FileSystems.IFile,System.String)">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.SetContentFromByteArray(Neptuo.FileSystems.IFile,System.Byte[])">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="M:Neptuo.FileSystems._FileContentExtensions.SetContentFromStream(Neptuo.FileSystems.IFile,System.IO.Stream)">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="T:Neptuo.FileSystems.FileSystemException">
            <summary>
            Generic exception that can occur in virtual file systems.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.FileSystemException.#ctor(System.String)">
            <summary>
            Create new instance with <paramref name="message"/> as context information.
            </summary>
            <param name="message">Context information.</param>
        </member>
        <member name="M:Neptuo.FileSystems.FileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Create new instance with <paramref name="message"/> as context information 
            and <paramref name="innerException"/> as inner exception that is the cause of this exception.
            </summary>
            <param name="message">Context information.</param>
            <param name="innerException">Inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:Neptuo.FileSystems.IReadOnlyDirectory">
            <summary>
            Represents (not updateable) directory in virtual file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.EnumerateDirectories">
            <summary>
            Returns enumeration of all child directories.
            </summary>
            <returns>Enumeration of all child directories.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.FindDirectories(System.String,System.Boolean)">
            <summary>
            Returns enumeration of all child directories.
            </summary>
            <param name="searchPattern">Name for filtering.</param>
            <param name="inAllDescendants">True for not only direct childs.</param>
            <returns>Enumeration of all child directories.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.EnumerateFiles">
            <summary>
            Returns enumeration of all child files.
            </summary>
            <returns>Enumeration of all child files</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.FindFiles(System.String,System.Boolean)">
            <summary>
            Returns enumeration of all child files.
            </summary>
            <param name="searchPattern">Name for filtering.</param>
            <param name="inAllDescendants">True for not only direct childs.</param>
            <returns>Enumeration of all child files.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.ContainsDirectoryName(System.String)">
            <summary>
            Returns true if this directory contains directory with <paramref name="directoryName"/>.
            </summary>
            <param name="directoryName">Directory name to test.</param>
            <returns>True if this directory contains directory with <paramref name="directoryName"/>.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyDirectory.ContainsFileName(System.String)">
            <summary>
            Returns true if this directory contains file with <paramref name="fileName"/>.
            </summary>
            <param name="fileName">File name to test.</param>
            <returns>True if this directory contains file with <paramref name="fileName"/>.</returns>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyDirectory.Name">
            <summary>
            Directory name.
            </summary>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyDirectory.Parent">
            <summary>
            Link to parent directory.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems.IReadOnlyFile">
            <summary>
            Represents (not updateable) file in virtual file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyFile.GetContentAsync">
            <summary>
            Returns file content.
            </summary>
            <returns>File content.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyFile.GetContentAsByteArrayAsync">
            <summary>
            Returns file content as byte array.
            </summary>
            <returns>File content as byte array.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IReadOnlyFile.GetContentAsStreamAsync">
            <summary>
            Returns file content as stream.
            </summary>
            <returns>File content as stream.</returns>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyFile.Name">
            <summary>
            File name without extension.
            </summary>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyFile.Extension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyFile.Parent">
            <summary>
            Link to parent directory.
            </summary>
        </member>
        <member name="P:Neptuo.FileSystems.IReadOnlyFile.FileSize">
            <summary>
            Size of file in bytes.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems.LocalDirectory">
            <summary>
            Virtual file system directory implemented as stadart file system directory.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems.IDirectory">
            <summary>
            Represents directory in virtual file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.IDirectory.CreateDirectory(System.String)">
            <summary>
            Creates new sub directory in this directory.
            </summary>
            <param name="directoryName">Name of new directory, must be unique.</param>
            <returns>Newly create directory.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IDirectory.CreateFile(System.String)">
            <summary>
            Creats new empty file with name <paramref name="fileName"/>.
            </summary>
            <param name="fileName">New file name.</param>
            <returns>Newly created file.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.#ctor(System.String)">
            <summary>
            Creates new instance that points to the <paramref name="fullPath"/>.
            </summary>
            <param name="fullPath">Standard file system path to the directory.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.#ctor(Neptuo.FileSystems.IDirectory,System.String)">
            <summary>
            Creates new instance that points to the <paramref name="fullPath"/> and uses <paramref name="parent"/> as its parent.
            </summary>
            <param name="parent">Virtual parent directory.</param>
            <param name="fullPath">Standard file system path to the directory.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.SetDirectoryRelatedProperties(System.String)">
            <summary>
            Sets directory related properties from <paramref name="fullPath"/>.
            </summary>
            <param name="fullPath">Standard file system path to directory.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.GetParentDirectoryFromFullPath(System.String)">
            <summary>
            Helper to create parent directory virtual instance.
            </summary>
            <param name="fullPath">Standard file system path to directory.</param>
            <returns>Wrapped parent directory.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.EnumerateChildDirectories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns enumeration of directories with this as parent.
            </summary>
            <param name="paths">Enumeration of directory paths</param>
            <returns>Enumeration of directories with this as parent.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.EnumerateAllDirectories(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns enumeration of directories without explicit parent.
            </summary>
            <param name="paths">Enumeration of directory paths</param>
            <returns>Enumeration of directories without explicit parent.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.LocalDirectory.GetSearchOption(System.Boolean)">
            <summary>
            Returns instance of <see cref="T:System.IO.SearchOption"/> from <paramref name="inAllDescendants"/>.
            </summary>
            <param name="inAllDescendants">True for not only direct childs.</param>
            <returns>Instance of <see cref="T:System.IO.SearchOption"/> from <paramref name="inAllDescendants"/>.</returns>
        </member>
        <member name="T:Neptuo.FileSystems.LocalFile">
            <summary>
            Virtual file system file implemented as stadart file system file.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems.IFile">
            <summary>
            Represents file in virtual file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.IFile.SetContentAsync(System.String)">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="M:Neptuo.FileSystems.IFile.SetContentFromByteArrayAsync(System.Byte[])">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="M:Neptuo.FileSystems.IFile.SetContentFromStreamAsync(System.IO.Stream)">
            <summary>
            Overrides file content to <paramref name="fileContent"/>.
            </summary>
            <param name="fileContent">New file content.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFile.#ctor(System.String)">
            <summary>
            Creates new instance that points to the <paramref name="fullPath"/>.
            </summary>
            <param name="fullPath">Standard file system path to file.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFile.#ctor(Neptuo.FileSystems.IDirectory,System.String)">
            <summary>
            Creates new instance that points to the <paramref name="fullPath"/> and uses <paramref name="parent"/> as its parent.
            </summary>
            <param name="parent">Virtual parent directory.</param>
            <param name="fullPath">Standard file system path to the file.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFile.SetFileRelatedProperties(System.String)">
            <summary>
            Sets file related properties from <paramref name="fullPath"/>.
            </summary>
            <param name="fullPath">Standard file system path to file.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFile.GetFileSize(System.String)">
            <summary>
            Helper to get length of file.
            </summary>
            <param name="fullPath">Standard file system path to file.</param>
            <returns>Length of file.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFile.GetParentDirectoryFromFullPath(System.String)">
            <summary>
            Helper to create parent directory virtual instance.
            </summary>
            <param name="fullPath">Standard file system path to file.</param>
            <returns>Wrapped parent directory.</returns>
        </member>
        <member name="T:Neptuo.FileSystems.IFileSystem">
            <summary>
            Virtual file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.IFileSystem.IsWriteable(Neptuo.FileSystems.IDirectory)">
            <summary>
            Returns <c>true</c> if <paramref name="directory"/> (from this file system) is writeable.
            </summary>
            <param name="directory">Directory to test if writeable.</param>
            <returns><c>true</c> if <paramref name="directory"/> is wrteable; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.FileSystems.IFileSystem.AsWriteable(Neptuo.FileSystems.IReadOnlyDirectory)">
            <summary>
            Returns writeable directory for <paramref name="directory"/>.
            </summary>
            <param name="directory">Directory to turn into writeable one.</param>
            <returns>Writeable directory for <paramref name="directory"/>.</returns>
            <exception cref="T:Neptuo.FileSystems.FileSystemException">When <paramref name="directory"/> is read only.</exception>
        </member>
        <member name="P:Neptuo.FileSystems.IFileSystem.RootDirectory">
            <summary>
            File system root directory.
            </summary>
        </member>
        <member name="P:Neptuo.FileSystems.IFileSystem.IsReadOnly">
            <summary>
            If <c>true</c>, file system is read only.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems.LocalFileSystem">
            <summary>
            Virtual file system implemented as stadart file system.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFileSystem.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new instance with <paramref name="rootPath"/> as root directory.
            </summary>
            <param name="rootPath">Path to root directory.</param>
            <param name="isReadOnly">Whether file system should be read-only.</param>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFileSystem.FromFilePath(System.String)">
            <summary>
            Creates static file for <paramref name="filePath"/> of standart file system.
            </summary>
            <param name="filePath">Path to existing file.</param>
            <returns>Static file for <paramref name="filePath"/>.</returns>
            <exception cref="T:Neptuo.FileSystems.FileSystemException">When <paramref name="filePath"/> doesn't point to existing file.</exception>
        </member>
        <member name="M:Neptuo.FileSystems.LocalFileSystem.FromDirectoryPath(System.String)">
            <summary>
            Creates static file for <paramref name="directoryPath"/> of standart file system.
            </summary>
            <param name="directoryPath">Path to existing directory.</param>
            <returns>Static file for <paramref name="directoryPath"/>.</returns>
            <exception cref="T:Neptuo.FileSystems.FileSystemException">When <paramref name="directoryPath"/> doesn't point to existing directory.</exception>
        </member>
        <member name="P:Neptuo.FileSystems.LocalFileSystem.RootDirectory">
            <summary>
            File system root directory.
            </summary>
        </member>
        <member name="T:Neptuo.FileSystems._EnsureExtensions">
            <summary>
            Exceptions extensions on file systems.
            </summary>
        </member>
        <member name="M:Neptuo.FileSystems._EnsureExtensions.FileSystem(Neptuo.Exceptions.Helpers.EnsureExceptionHelper,System.String,System.Object[])">
            <summary>
            Creates exception <see cref="T:Neptuo.FileSystems.FileSystemException"/> 
            and message formatted from <paramref name="format"/> and <paramref name="formatParameters"/>.
            </summary>
            <param name="guard"></param>
            <param name="format"></param>
            <param name="formatParameters"></param>
            <returns><see cref="T:Neptuo.FileSystems.FileSystemException"/>.</returns>
        </member>
        <member name="M:Neptuo.FileSystems._EnsureExtensions.XmlFile(Neptuo.Exceptions.Helpers.EnsureConditionHelper,Neptuo.FileSystems.IReadOnlyFile,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> when <paramref name="xmlFile"/> is <c>null</c>
            and <see cref="T:Neptuo.FileSystems.FileSystemException"/> when <paramref name="xmlFile"/> is not XML file.
            </summary>
            <param name="condition"></param>
            <param name="xmlFile">File to test.</param>
            <param name="argumentName">File argument name.</param>
        </member>
        <member name="T:Neptuo.Ensure">
            <summary>
            Helper for throwing exceptions.
            </summary>
        </member>
        <member name="M:Neptuo.Ensure.NotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is <code>null</code>.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.NotNull(System.Object,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is <code>null</code>.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
            <param name="message">Text description.</param>
        </member>
        <member name="M:Neptuo.Ensure.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.
            Throws <see cref="T:System.ArgumentException"/> if <paramref name="argument"/> is equal to <code>String.Empty</code>.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.Positive(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument"/> is lower or equal to zero.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.PositiveOrZero(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument"/> is lower than zero.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.Negative(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument"/> is greater or equal to zero.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.NegativeOrZero(System.Int32,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="argument"/> is greater than zero.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:Neptuo.Ensure.NotDisposed(Neptuo.IDisposable,System.String)">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if <paramref name="argument"/> is already disposed.
            </summary>
            <param name="argument">Argument to test.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="F:Neptuo.Ensure.Exception">
            <summary>
            Helper for throwing exceptions.
            </summary>
        </member>
        <member name="F:Neptuo.Ensure.Condition">
            <summary>
            Helper for custom conditions.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.GuidUniqueNameProvider">
            <summary>
            Generates identifiers from <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.IUniqueNameProvider">
            <summary>
            Provider for unique names.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.IUniqueNameProvider.Next">
            <summary>
            Generates new unique name.
            </summary>
            <returns>New unique name.</returns>
        </member>
        <member name="T:Neptuo.Globalization.CultureInfoParser">
            <summary>
            Methods for parsing culture info.
            </summary>
        </member>
        <member name="M:Neptuo.Globalization.CultureInfoParser.TryParse(System.String,System.Globalization.CultureInfo@)">
            <summary>
            Tries to parse <paramref name="value"/> into <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">Source text value.</param>
            <param name="cultureInfo">Target parsed culture info.</param>
            <returns>
            If <c>true</c>, parsing was successfull and <paramref name="cultureInfo"/> is set parsed culture info.
            otherwise <c>false</c> and <paramref name="cultureInfo"/> is set to <c>null</c>.
            </returns>
        </member>
        <member name="T:Neptuo.Activators.IActivator`2">
            <summary>
            Activator for <typeparamref name="T"/> with posibility to use parameters for inicialization.
            </summary>
            <typeparam name="T">Type of service to create.</typeparam>
            <typeparam name="TContext">Type of context for activation.</typeparam>
        </member>
        <member name="M:Neptuo.Activators.IActivator`2.Create(`1)">
            <summary>
            Creates service of type <typeparamref name="T"/> with posibility to use <paramref name="context"/> for inicialization.
            </summary>
            <param name="context">Activation context.</param>
            <returns>Service of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Neptuo.Activators.IDependencyContainer">
            <summary>
            Service locator with ability to register services.
            </summary>
        </member>
        <member name="T:Neptuo.Activators.IDependencyProvider">
            <summary>
            Service locator with hierarchy support.
            </summary>
        </member>
        <member name="M:Neptuo.Activators.IDependencyProvider.Scope(System.String)">
            <summary>
            Creates new child container based on this provider.
            </summary>
            <param name="name">Optional name for named scopes.</param>
            <returns>New child container based on this provider.</returns>
        </member>
        <member name="M:Neptuo.Activators.IDependencyProvider.Resolve(System.Type)">
            <summary>
            Resolves instance of <paramref name="requiredType"/>.
            </summary>
            <param name="requiredType">Required type.</param>
            <param name="name">Optional name.</param>
            <returns>Instance of <paramref name="requiredType"/>; if it's not possible to create instance, return <c>null</c>.</returns>
        </member>
        <member name="P:Neptuo.Activators.IDependencyProvider.ScopeName">
            <summary>
            Returns name of the current scope.
            </summary>
        </member>
        <member name="M:Neptuo.Activators.IDependencyContainer.Map(System.Type,Neptuo.Activators.DependencyLifetime,System.Object)">
            <summary>
            Registers mapping from <paramref name="requiredType"/> to <paramref name="target"/>
            </summary>
            <param name="requiredType">Required type.</param>
            <param name="lifetime">Lifetime of created instance.</param>
            <param name="target">Any supported target object.</param>
            <returns>Self (fluently).</returns>
        </member>
        <member name="T:Neptuo.OutFunc`3">
            <summary>
            Function with one input parameter, one output parameter and result value.
            </summary>
            <typeparam name="T">Type of input parameter.</typeparam>
            <typeparam name="TOutput">Type of output parameter.</typeparam>
            <typeparam name="TReturn">Type of result value.</typeparam>
            <param name="input">Input parametervalue.</param>
            <param name="output">Ouput parameter.</param>
            <returns>Computed result.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.IValidationResultBuilder">
            <summary>
            Validation result builder contract.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.IValidationResultBuilder.Add(Neptuo.Pipelines.Validators.Messages.IValidationMessage)">
            <summary>
            Adds message to the result.
            Based on configuration for constructor, this message will or will not invalidate future result.
            </summary>
            <param name="message">The message.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.IValidationResultBuilder.Add(Neptuo.Pipelines.Validators.Messages.IValidationMessage,System.Boolean)">
            <summary>
            Adds message to the result.
            Based on <paramref name="causesInvalidation" />, this message will or will not invalidate future result.
            </summary>
            <param name="message">The message.</param>
            <param name="causesInvalidation">Flag to see if <paramref name="message"/> invalidates future result.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.IValidationResultBuilder.ToResult">
            <summary>
            Creates result from this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.ValidationResultBuilder">
            <summary>
            Builder for <see cref="T:Neptuo.Pipelines.Validators.IValidationResult"/>
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.IValidationResult">
            <summary>
            Describes result of validation process.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.IValidationResult.IsValid">
            <summary>
            Flag to see if validation was successfull (= model was valid).
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.IValidationResult.Messages">
            <summary>
            Enumeration of messages created by validation process.
            Can also contain non-error message (eg. warnings).
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationResultBuilder.#ctor(System.Boolean)">
            <summary>
            Creates new instance of builder.
            </summary>
            <param name="isInvalidationCausedByAnyMessage">
            If <c>true</c>, adding any message will invalidate future result.
            If <c>false</c>, only explicitly maked messages causes invalidation of result.
            </param>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationResultBuilder.Add(Neptuo.Pipelines.Validators.Messages.IValidationMessage)">
            <summary>
            Adds message to the result.
            Based on configuration for constructor, this message will or will not invalidate future result.
            </summary>
            <param name="message">The message.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationResultBuilder.Add(Neptuo.Pipelines.Validators.Messages.IValidationMessage,System.Boolean)">
            <summary>
            Adds message to the result.
            Based on <paramref name="causesInvalidation" />, this message will or will not invalidate future result.
            </summary>
            <param name="message">The message.</param>
            <param name="causesInvalidation">Flag to see if <paramref name="message"/> invalidates future result.</param>
            <returns>Self (for fluency).</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Validators._ValidationResultBuilderExtensions">
            <summary>
            Common extensions for <see cref="T:Neptuo.Pipelines.Validators.IValidationResultBuilder"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators._ValidationResultBuilderExtensions.AddTextMessage(Neptuo.Pipelines.Validators.IValidationResultBuilder,System.String,System.String,System.Object[])">
            <summary>
            Adds <see cref="T:Neptuo.Pipelines.Validators.Messages.TextValidationMessage"/> to the <paramref name="builder"/>.
            </summary>
            <param name="builder">Result builder.</param>
            <param name="key">Message key.</param>
            <param name="message">Text format.</param>
            <param name="parameters">Optional parameters for <paramref name="message"/>.</param>
            <returns><paramref name="builder"/>.</returns>
        </member>
        <member name="T:Neptuo.Reflection.DefaultReflectionService">
            <summary>
            Default implementation of <see cref="T:Neptuo.Reflection.IReflectionService"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Reflection.IReflectionService">
            <summary>
            Some usefull shortcuts in reflection.
            </summary>
        </member>
        <member name="M:Neptuo.Reflection.IReflectionService.EnumerateAssemblies">
            <summary>
            Enumerates assemblies in this application domain.
            </summary>
            <returns>Enumeration of assemblies in this application domain.</returns>
        </member>
        <member name="M:Neptuo.Reflection.IReflectionService.LoadAssembly(System.String)">
            <summary>
            Loads assembly to this application domain.
            </summary>
            <param name="assemblyFile"></param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.Reflection.IReflectionService.LoadType(System.String)">
            <summary>
            Loads type described by assembly qualified name in <paramref name="typeAssemblyName"/>.
            </summary>
            <param name="typeAssemblyName">Assembly qualified name of the type to load.</param>
            <returns>Type described by assembly qualified name in <paramref name="typeAssemblyName"/></returns>
        </member>
        <member name="P:Neptuo.Reflection.IReflectionService.AppDomain">
            <summary>
            Application domain on which this service operates.
            </summary>
        </member>
        <member name="M:Neptuo.Reflection.DefaultReflectionService.#ctor(System.AppDomain)">
            <summary>
            Creates instance for <paramref name="appDomain"/>.
            </summary>
            <param name="appDomain">Application domain for loading assemblies into.</param>
        </member>
        <member name="T:Neptuo.Reflection.ReflectionFactory">
            <summary>
            Factory for creating reflection services.
            </summary>
        </member>
        <member name="M:Neptuo.Reflection.ReflectionFactory.FromAppDomain(System.AppDomain)">
            <summary>
            Creates reflection service for <paramref name="appDomain"/>.
            </summary>
            <param name="appDomain">Application domain...</param>
            <returns>Created reflection service.</returns>
        </member>
        <member name="M:Neptuo.Reflection.ReflectionFactory.FromCurrentAppDomain">
            <summary>
            Creates reflection service for current app domain.
            </summary>
            <returns>Created reflection service.</returns>
        </member>
        <member name="T:Neptuo.Security.Cryptography.HashFactory">
            <summary>
            Provider for various hashing functions.
            This class is not thread safe.
            </summary>
        </member>
        <member name="M:Neptuo.Security.Cryptography.HashFactory.EnsureSha1">
            <summary>
            Ensures instance of SHA1 hash provider.
            </summary>
        </member>
        <member name="M:Neptuo.Security.Cryptography.HashFactory.EnsureSha256">
            <summary>
            Ensures instance of SHA256 hash provider.
            </summary>
        </member>
        <member name="M:Neptuo.Security.Cryptography.HashFactory.CreateProvider(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Creates delegate for computing hashes using <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">Algorithm for compution hashes.</param>
            <returns></returns>
        </member>
        <member name="M:Neptuo.Security.Cryptography.HashFactory.CreateSha1">
            <summary>
            Creates delegate for computing SHA1 hashes.
            </summary>
        </member>
        <member name="M:Neptuo.Security.Cryptography.HashFactory.CreateSha256">
            <summary>
            Creates delegate for computing SHA256 hashes.
            </summary>
        </member>
        <member name="P:Neptuo.Security.Cryptography.HashFactory.Sha1">
            <summary>
            Provides SHA1 hash provider.
            </summary>
        </member>
        <member name="P:Neptuo.Security.Cryptography.HashFactory.Sha256">
            <summary>
            Provides SHA256 hash provider.
            </summary>
        </member>
        <member name="T:Neptuo.ComponentModel.SequenceUniqueNameProvider">
            <summary>
            Generates identifiers using specified prefix and integer sequence.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.SequenceUniqueNameProvider.prefix">
            <summary>
            Optional string prefix.
            </summary>
        </member>
        <member name="F:Neptuo.ComponentModel.SequenceUniqueNameProvider.offset">
            <summary>
            Optional zero offset.
            </summary>
        </member>
        <member name="M:Neptuo.ComponentModel.SequenceUniqueNameProvider.#ctor(System.String,System.Int32)">
            <summary>
            Creates instance with optional string prefix <paramref name="prefix"/> and optional int offset <paramref name="offset"/>.
            </summary>
            <param name="prefix">Optional string prefix.</param>
            <param name="offset">Optional zero offset.</param>
        </member>
        <member name="T:Neptuo.Security.Cryptography.HashFunc">
            <summary>
            Hash computer.
            </summary>
            <param name="source">Plain text value.</param>
            <returns>Hashed value from <paramref name="source"/>.</returns>
        </member>
        <member name="T:Neptuo.Security.Cryptography.HashProvider">
            <summary>
            Provider for various hashing functions (using static access).
            Targeted for single hash computing. When computing more hashes, use <see cref="T:Neptuo.Security.Cryptography.HashFactory"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Security.Cryptography.HashProvider.Sha1">
            <summary>
            Provides SHA1 hash provider.
            </summary>
        </member>
        <member name="P:Neptuo.Security.Cryptography.HashProvider.Sha256">
            <summary>
            Provides SHA1 hash provider.
            </summary>
        </member>
        <member name="T:Neptuo.StateMachines.IStateMachineState`2">
            <summary>
            Represents single of state machine.
            </summary>
            <typeparam name="TItem">State machine item type (whole input is enumeration of this type).</typeparam>
            <typeparam name="TState">Type of target state.</typeparam>
        </member>
        <member name="M:Neptuo.StateMachines.IStateMachineState`2.Accept(`0,System.Int32)">
            <summary>
            Processes logic on input <paramref name="item"/> and returns new (or this) state of state machine to move into.
            </summary>
            <param name="item">Current input element.</param>
            <param name="position">Position (index) in whole input.</param>
            <returns>New (or this) state of state machine to move into.</returns>
        </member>
        <member name="T:Neptuo.StateMachines.IStringState`1">
            <summary>
            Represents state of state machine which works on enumeration of characters (string).
            </summary>
            <typeparam name="TState">Type of target state.</typeparam>
        </member>
        <member name="T:Neptuo.StateMachines.StateMachine`2">
            <summary>
            Implementation of state machine which works on enumeration of <typeparamref name="TItem"/> and supports states of type <typeparamref name="TState"/>.
            </summary>
            <typeparam name="TItem">Type of item (whole input is enumeration of this type).</typeparam>
            <typeparam name="TState">Type of single state.</typeparam>
        </member>
        <member name="M:Neptuo.StateMachines.StateMachine`2.#ctor(`1)">
            <summary>
            Creates new instance with initial state <paramref name="initialState"/>.
            </summary>
            <param name="initialState">First state of state machine.</param>
        </member>
        <member name="M:Neptuo.StateMachines.StateMachine`2.OnEnterConcreteState``1(System.EventHandler{Neptuo.StateMachines.StateMachineEventArgs{``0}})">
            <summary>
            Adds <paramref name="handler"/> to listening on event <see cref="E:Neptuo.StateMachines.StateMachine`2.OnEnterState"/> if entered state is of type <typeparamref name="TConcreteState"/>.
            </summary>
            <param name="handler">Handler for processing event.</param>
        </member>
        <member name="M:Neptuo.StateMachines.StateMachine`2.OnLeaveConcreteState``1(System.EventHandler{Neptuo.StateMachines.StateMachineEventArgs{``0}})">
            <summary>
            Adds <paramref name="handler"/> to listening on event <see cref="E:Neptuo.StateMachines.StateMachine`2.OnLeaveState"/> if left state is of type <typeparamref name="TConcreteState"/>.
            </summary>
            <param name="handler">Handler for processing event.</param>
        </member>
        <member name="M:Neptuo.StateMachines.StateMachine`2.Process(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Processes <paramref name="items"/> to returns state in which state machine remains after processing whole input.
            </summary>
            <param name="items">Enumeration of input.</param>
            <returns>State, in which state machine remains after processing whole input.</returns>
        </member>
        <member name="P:Neptuo.StateMachines.StateMachine`2.InitialState">
            <summary>
            First state of state machine.
            </summary>
        </member>
        <member name="E:Neptuo.StateMachines.StateMachine`2.OnEnterState">
            <summary>
            Event fired when entering (before accepting input item) state.
            </summary>
        </member>
        <member name="E:Neptuo.StateMachines.StateMachine`2.OnLeaveState">
            <summary>
            Event fired when leaving (after accepting input item) state.
            </summary>
        </member>
        <member name="T:Neptuo.StateMachines.StateMachineEventArgs`1">
            <summary>
            Describes context of <see cref="E:Neptuo.StateMachines.StateMachine`2.OnEnterState"/> or <see cref="E:Neptuo.StateMachines.StateMachine`2.OnLeaveState"/> event.
            </summary>
            <typeparam name="TState">Type of target state.</typeparam>
        </member>
        <member name="M:Neptuo.StateMachines.StateMachineEventArgs`1.#ctor(`0)">
            <summary>
            Creates new instance with <paramref name="state"/> as current state machine state.
            </summary>
            <param name="state">Current state of state machine.</param>
        </member>
        <member name="P:Neptuo.StateMachines.StateMachineEventArgs`1.State">
            <summary>
            Current state of state machine.
            </summary>
        </member>
        <member name="T:Neptuo.StateMachines.StringState`2">
            <summary>
            Base state of state machine which works on enumeration of characters (string).
            </summary>
            <typeparam name="TContext">Type of context which is automaticaly shared between state transitions.</typeparam>
            <typeparam name="TState">Type of targe state.</typeparam>
        </member>
        <member name="M:Neptuo.StateMachines.StringState`2.#ctor">
            <summary>
            Creates new empty instance.
            </summary>
        </member>
        <member name="M:Neptuo.StateMachines.StringState`2.Move``1">
            <summary>
            Creates instance of <typeparamref name="TNewState"/> as result of accepting input item.
            Automatically shares context object.
            </summary>
            <typeparam name="TNewState">Type of new state.</typeparam>
            <returns>Instance of new state with shared context objekt.</returns>
        </member>
        <member name="M:Neptuo.StateMachines.StringState`2.GetContextForNewState">
            <summary>
            Factory method for context object used in <see cref="M:Neptuo.StateMachines.StringState`2.Move``1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Neptuo.StateMachines.StringState`2.Text">
            <summary>
            Placeholder for accumulating input when remaing in the same state.
            </summary>
        </member>
        <member name="P:Neptuo.StateMachines.StringState`2.Context">
            <summary>
            Automaticaly shared context object.
            </summary>
        </member>
        <member name="T:Neptuo.StateMachines.StringStateMachine`1">
            <summary>
            Implementation of state machine which works on enumeration of characters (string).
            </summary>
            <typeparam name="TState">Type of single state.</typeparam>
        </member>
        <member name="M:Neptuo.StateMachines.StringStateMachine`1.#ctor(`0)">
            <summary>
            Creates new instance with initial state <paramref name="initialState"/>.
            </summary>
            <param name="initialState">First state of state machine.</param>
        </member>
        <member name="T:Neptuo.Threading.DisposableLock">
            <summary>
            Wrapper for <see cref="T:System.Threading.ReaderWriterLockSlim"/> that can be used in using block.
            </summary>
        </member>
        <member name="M:Neptuo.Threading.DisposableLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates new instance and uses WriteLock for exclusive execution.
            </summary>
            <param name="slimLock">Inner lock.</param>
        </member>
        <member name="E:Neptuo.Threading.DisposableLock.Disposed">
            <summary>
            Executed when this object is disposed (after unlocking inner lock).
            </summary>
        </member>
        <member name="T:Neptuo.Threading.LockProvider">
            <summary>
            Wrapps <see cref="T:System.Threading.ReaderWriterLockSlim"/> and works like a factory for disposable objects for using block.
            When disposed, disposes inner lock.
            </summary>
        </member>
        <member name="M:Neptuo.Threading.LockProvider.#ctor">
            <summary>
            Creates new instance with self managed inner lock.
            </summary>
        </member>
        <member name="M:Neptuo.Threading.LockProvider.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Creates new instance and uses WriteLock for exclusive execution.
            </summary>
            <param name="slimLock">Inner lock.</param>
        </member>
        <member name="M:Neptuo.Threading.LockProvider.Lock">
            <summary>
            Locks inner lock for exclusive access.
            </summary>
            <returns>Object which is used to exit lock when disposed.</returns>
        </member>
        <member name="E:Neptuo.Threading.LockProvider.Disposed">
            <summary>
            Executed when objekt from <see cref="M:Neptuo.Threading.LockProvider.Lock"/> is disposed (after unlocking inner lock).
            </summary>
        </member>
        <member name="P:Neptuo.Threading.LockProvider.IsLocked">
            <summary>
            Returns <c>true</c> is anybody is waiting on inner lock.
            </summary>
        </member>
        <member name="T:Neptuo.Threading.MultiLockProvider">
            <summary>
            Works like <see cref="T:Neptuo.Threading.LockProvider"/>, but supports multiple paralel processes.
            These processes are distinguished by key parameter to the method <see cref="M:Neptuo.Threading.MultiLockProvider.Lock(System.Object)"/> 
            (= call with the same keys are executed one by one; but calls with different keys are executed paralelly).
            </summary>
        </member>
        <member name="M:Neptuo.Threading.MultiLockProvider.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Neptuo.Threading.MultiLockProvider.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Creates new instance with transformation function for input keys.
            </summary>
            <param name="keyMapper">Function which transforms input key to keys, which are used internally.</param>
        </member>
        <member name="M:Neptuo.Threading.MultiLockProvider.Lock(System.Object)">
            <summary>
            Locks inner lock for <paramref name="key"/> for exclusive access.
            </summary>
            <param name="key">Key to distinguish different locks/processes.</param>
            <returns>Object which is used to exit lock when disposed.</returns>
        </member>
        <member name="T:Neptuo.Tokens.Token">
            <summary>
            Describes parsed token. Name of token is splitted into <see cref="P:Neptuo.Tokens.Token.Prefix"/> and <see cref="P:Neptuo.Tokens.Token.Name"/>, <see cref="P:Neptuo.Tokens.Token.Fullname"/> joins both.
            Default attributes are in <see cref="P:Neptuo.Tokens.Token.DefaultAttributes"/> collection.
            Named attributes are in <see cref="P:Neptuo.Tokens.Token.Attributes"/> collection.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.Token.#ctor">
            <summary>
            Creates new empty instance.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.Token.SetLineInfo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates source line info.
            </summary>
            <param name="lineNumber">Line number.</param>
            <param name="columnIndex">Index at line.</param>
            <param name="endLineNumber">Line number of range end.</param>
            <param name="endColumnIndex">Index at line of range end.</param>
        </member>
        <member name="M:Neptuo.Tokens.Token.AddAttribute(Neptuo.Tokens.TokenAttribute)">
            <summary>
            Adds named attribute.
            </summary>
            <param name="attribute">New named attribute.</param>
        </member>
        <member name="M:Neptuo.Tokens.Token.AddDefaultAttribute(System.String)">
            <summary>
            Adds default (not named) attribute.
            </summary>
            <param name="defaultAttribute">Default (not named) attribute.</param>
        </member>
        <member name="M:Neptuo.Tokens.Token.ToString">
            <summary>
            Formats original token string.
            </summary>
            <returns>Original token string.</returns>
        </member>
        <member name="P:Neptuo.Tokens.Token.Prefix">
            <summary>
            Token prefix. <see cref="P:Neptuo.Tokens.Token.Fullname"/> part before ':'.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.Token.Name">
            <summary>
            Token local name. <see cref="P:Neptuo.Tokens.Token.Fullname"/> part after ':'.S
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.Token.Fullname">
            <summary>
            Token full name. Joined <see cref="P:Neptuo.Tokens.Token.Prefix"/> and <see cref="P:Neptuo.Tokens.Token.Name"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.Token.Attributes">
            <summary>
            Enumeration of named attributes.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.Token.DefaultAttributes">
            <summary>
            Enumeration of default (not named) attributes.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenAttribute">
            <summary>
            Describes named token attribute.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.TokenAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates new instance with name <paramref name="name"/> and optional value <paramref name="value"/>.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="P:Neptuo.Tokens.TokenAttribute.OwnerToken">
            <summary>
            The owner of this attribute.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenAttribute.Name">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenAttribute.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenEventArgs">
            <summary>
            When parser finds token, this object describes newly found token, original text value and token position in that text.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.TokenEventArgs.#ctor(System.String,Neptuo.Tokens.Token,System.Int32,System.Int32)">
            <summary>
            Creates new instance.
            </summary>
            <param name="originalContent">Original text value passed to parser.</param>
            <param name="token">Parsed token.</param>
            <param name="startPosition">Token first character index in <paramref name="originalContent"/>.</param>
            <param name="endPosition">Token last characted index in <paramref name="originalContent"/>.</param>
        </member>
        <member name="P:Neptuo.Tokens.TokenEventArgs.OriginalContent">
            <summary>
            Original text value passed to parser.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenEventArgs.Token">
            <summary>
            Parsed token.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenEventArgs.StartPosition">
            <summary>
            Token first character index in <see cref="P:Neptuo.Tokens.TokenEventArgs.OriginalContent"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenEventArgs.EndPosition">
            <summary>
            Token last characted index in <see cref="P:Neptuo.Tokens.TokenEventArgs.OriginalContent"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenParser">
            <summary>
            Parser for token syntax.
            Supported features can be se in <see cref="P:Neptuo.Tokens.TokenParser.Configuration"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.#ctor">
            <summary>
            Creates new empty instance.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.Parse(System.String)">
            <summary>
            Processes <paramref name="content"/> and fires <see cref="E:Neptuo.Tokens.TokenParser.OnParsedToken"/> when token is found.
            </summary>
            <param name="content">Source text.</param>
            <returns><c>true</c> if parsing was successfull (so <paramref name="content"/> contained token(s) or only plain value).</returns>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.GetLineInfo(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Return line number and column index of <paramref name="foundIndex"/> in <paramref name="newLines"/>.
            </summary>
            <param name="newLines">List of indexes of new lines.</param>
            <param name="foundIndex">Some index.</param>
            <returns>Line number and column index of <paramref name="foundIndex"/> in <paramref name="newLines"/>.</returns>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.GetNewLineIndexes(System.String)">
            <summary>
            Returns list of indexes where new line character is located in <paramref name="content"/>.
            </summary>
            <param name="content">String value where to look for new line characters.</param>
            <returns>List of indexes where new line character is located</returns>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.IsSuccessState(Neptuo.Tokens.TokenState)">
            <summary>
            Determines if <paramref name="finalState"/> is acceptable in current context (and configuration).
            </summary>
            <param name="finalState">Returned state from state machine.</param>
            <returns><c>true</c> if <paramref name="finalState"/> is acceptable; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Neptuo.Tokens.TokenParser.GetStateMachineConfiguration">
            <summary>
            Converts parser configuration to state machine configuration.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParser.Configuration">
            <summary>
            Feature configuration.
            </summary>
        </member>
        <member name="E:Neptuo.Tokens.TokenParser.OnParsedToken">
            <summary>
            Event fired when token is found in source text.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenParserConfiguration">
            <summary>
            Feature configuration of <see cref="T:Neptuo.Tokens.TokenParser"/>.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParserConfiguration.AllowTextContent">
            <summary>
            Whether content can contain text character before, between or after tokens.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParserConfiguration.AllowEscapeSequence">
            <summary>
            Whether escape sequences in format '{{' text '}}' are allowed.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParserConfiguration.AllowMultipleTokens">
            <summary>
            Whether content can contain multiple tokens.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParserConfiguration.AllowDefaultAttributes">
            <summary>
            Whether default attributes are allowed.
            </summary>
        </member>
        <member name="P:Neptuo.Tokens.TokenParserConfiguration.AllowAttributes">
            <summary>
            Whether named attributes are allowed.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenStateMachine">
            <summary>
            Internal token parser realized as state machine.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenEscapeState">
            <summary>
            After escape start sequence '{{'.
            After finding '}}' moves to start state.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenAttributeNameState">
            <summary>
            When processing 
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenAttributeValueState">
            <summary>
            When processing named attribute value.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenDoneState">
            <summary>
            When processing input finished successfully.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenErrorState">
            <summary>
            When input was not valid to token.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenWriter">
            <summary>
            String formatter using tokens.
            </summary>
        </member>
        <member name="M:Neptuo.Tokens.TokenWriter.#ctor(System.String)">
            <summary>
            Creates new instance for format string as <paramref name="format"/>.
            </summary>
            <param name="format">Format string.</param>
        </member>
        <member name="M:Neptuo.Tokens.TokenWriter.Format(System.Func{System.String,System.String})">
            <summary>
            For each found token, calles <paramref name="tokenMapper"/> with token name and replaces that token with returned value.
            </summary>
            <param name="tokenMapper">Token name to token value replacer.</param>
            <returns>Formatted string with replaced tokens.</returns>
        </member>
        <member name="M:Neptuo.Tokens.TokenWriter.Format(Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection)">
            <summary>
            For each found token, tries to read string value from <paramref name="tokenMapper"/> and replaces that token with returned value.
            </summary>
            <param name="tokenMapper">Token name to token value replacer.</param>
            <returns>Formatted string with replaced tokens.</returns>
        </member>
        <member name="T:Neptuo.Tokens.TokenFormatHelper">
            <summary>
            Helper class for initial format parsing process.
            </summary>
        </member>
        <member name="T:Neptuo.Tokens.TokenWriterItem">
            <summary>
            Represents part of format string.
            Is static text value or token.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.DependencyValidationDispatcher">
            <summary>
            Base implementation of <see cref="T:Neptuo.Pipelines.Validators.IValidationDispatcher"/> using <see cref="T:Neptuo.Activators.IDependencyProvider"/>.
            Before and after validation also uses and sets <see cref="T:Neptuo.DomainModels.IValidatableModel"/>.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.IValidationDispatcher">
            <summary>
            Front facade for providing validations.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.IValidationDispatcher.Validate``1(``0)">
            <summary>
            Validates <paramref name="model"/> and returns validation result.
            </summary>
            <typeparam name="TModel">Type of model to validate.</typeparam>
            <param name="model">Model instance to validate.</param>
            <returns><see cref="T:Neptuo.Pipelines.Validators.IValidationResult"/> describing succes or validation failure.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.IValidationDispatcher.Validate(System.Object)">
            <summary>
            Validates <paramref name="model"/> using runtime type of model.
            Best for framework code where TModel can't be determined.
            </summary>
            <param name="model">Model instance to validate.</param>
            <returns><see cref="T:Neptuo.Pipelines.Validators.IValidationResult"/> describing succes or validation failure.</returns>
        </member>
        <member name="F:Neptuo.Pipelines.Validators.DependencyValidationDispatcher.ValidateMethodName">
            <summary>
            Name of the <see cref="M:Neptuo.Pipelines.Validators.Handlers.IValidationHandler`1.Handle(`0)"/>.
            </summary>
            <remarks>
            Because of SharpKit, this can't be defined by <see cref="T:Neptuo.Linq.Expressions.TypeHelper"/>.
            </remarks>
        </member>
        <member name="F:Neptuo.Pipelines.Validators.DependencyValidationDispatcher.dependencyProvider">
            <summary>
            Inner provider of validation handlers.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.DependencyValidationDispatcher.#ctor(Neptuo.Activators.IDependencyProvider)">
            <summary>
            Creates new instance using <paramref name="dependencyProvider"/> for resolving validation handlers.
            </summary>
            <param name="dependencyProvider">Resolver of validation handlers.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.IValidationMessage">
            <summary>
            Describes validation message.
            Not necessary must be error message.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.Messages.IValidationMessage.Key">
            <summary>
            Key (or property name) this message is bound to.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.Messages.IValidationMessage.Message">
            <summary>
            Text representation of message.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Handlers.IValidationHandler`1">
            <summary>
            Validator for instances of <typeparamref name="TModel"/>.
            </summary>
            <typeparam name="TModel">Type of model to validate.</typeparam>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Handlers.IValidationHandler`1.Handle(`0)">
            <summary>
            Validates <paramref name="model"/> and returns validation result.
            </summary>
            <param name="model">Model instance to validate.</param>
            <returns><see cref="T:Neptuo.Pipelines.Validators.IValidationResult"/> describing succes or validation failure.</returns>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.PropertyEqualMessage">
            <summary>
            Validation message for comparing two properties.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase">
            <summary>
            Validation message based of property which is bound to.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.ValidationMessageBase">
            <summary>
            Base implementation of <see cref="T:Neptuo.Pipelines.Validators.Messages.IValidationMessage"/>.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.ValidationMessageBase.#ctor(System.String,System.String)">
            <summary>
            Creates new instance for <paramref name="key"/> with message in <paramref name="message"/>.
            </summary>
            <param name="key">Validation message key.</param>
            <param name="message">Text representation of validation message.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.ValidationMessageBase.GetTextMessage">
            <summary>
            Formats text representation of validation message.
            Method is called only when message was not passed in ctor.
            Should be overriden in derivered classes when message parameter in ctor was not used.
            </summary>
            <returns>Text representation of validation message.</returns>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.#ctor(System.String,System.String)">
            <summary>
            Creates new instance with <paramref name="key"/> as validation message key 
            that is used as <see cref="P:Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.PropertyName"/> is <c>null</c>.
            </summary>
            <param name="key">Validation message key.</param>
            <param name="propertyName">Optional property name when differs from <paramref name="key"/>.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.PropertyName">
            <summary>
            Validated property name.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.StringLengthMessage">
            <summary>
            Validation message for minimal and maximal string length.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.StringLengthMessage.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates new instance for <paramref name="key"/>.
            </summary>
            <param name="key">Validation message key.</param>
            <param name="minLength">Minimal required string length.</param>
            <param name="maxLength">Maximal allowed string length.</param>
            <param name="propertyName">Optional property name when differs from <paramref name="key"/>.</param>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.Messages.StringLengthMessage.MinLength">
            <summary>
            Minimal required string length.
            </summary>
        </member>
        <member name="P:Neptuo.Pipelines.Validators.Messages.StringLengthMessage.MaxLength">
            <summary>
            Maximal allowed string length.
            </summary>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.StringNullOrEmptyMessage">
            <summary>
            Validation message for string not 'null or empty'.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.StringNullOrEmptyMessage.#ctor(System.String,System.String)">
            <summary>
            Creates new instance for <paramref name="key"/>.
            </summary>
            <param name="key">Validation message key.</param>
            <param name="propertyName">Optional property name when differs from <paramref name="key"/>.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.Messages.TextValidationMessage">
            <summary>
            Validation message with custom text message.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.Messages.TextValidationMessage.#ctor(System.String,System.String)">
            <summary>
            Creates new instance for <paramref name="key"/> with message in <paramref name="message"/>.
            </summary>
            <param name="key">Validation message key.</param>
            <param name="message">Text representation of validation message.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.ValidationException">
            <summary>
            Validation exception.
            This class should be used for throwing errors in validation.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationException.#ctor(Neptuo.Pipelines.Validators.IValidationResult)">
            <summary>
            Creates new instance with <paramref name="result"/>.
            </summary>
            <param name="result">Result of validation process.</param>
        </member>
        <member name="T:Neptuo.Pipelines.Validators.ValidationResult">
            <summary>
            Base implementation of <see cref="T:Neptuo.Pipelines.Validators.IValidationResult"/>.
            Supports warning messages.
            </summary>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationResult.#ctor(System.Boolean)">
            <summary>
            Creates new instance with <paramref name="isValid"/> as validation success/failure flag and empty message collection.
            </summary>
            <param name="isValid">Whether validation was successfull.</param>
        </member>
        <member name="M:Neptuo.Pipelines.Validators.ValidationResult.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{Neptuo.Pipelines.Validators.Messages.IValidationMessage})">
            <summary>
            Creates new instance with <paramref name="isValid"/> as validation success/failure flag and <paramref name="messages"/> as message collection.
            </summary>
            <param name="isValid">Whether validation was successfull.</param>
            <param name="messages">Collection of validation messages.</param>
        </member>
    </members>
</doc>
